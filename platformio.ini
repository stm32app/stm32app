; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[env]
platform = ststm32
lib_ldf_mode = chain+
upload_protocol = stlink
upload_flags = -c set CPUTAPID 0
lib_archive = no
lib_extra_dirs = 
	lib
build_flags = 
	-Isrc
	-B/usr/local/Cellar/mold/1.1/libexec/mold/
	-Isrc/configs
	-g
	-std=c99
	-fno-common
	-ffunction-sections
	-fdata-sections
	-nostdlib
	-nodefaultlibs
	-DSEMIHOSTING -DDEBUG -DD
	-DLFS_CONFIG=lfs_config.h
	-DCORU_CONFIG=coru_config.h
	-DCANOPEN_CONFIG=canopen_config.h
	-DCO_DRIVER_CUSTOM
	-DFREERTOS_CONFIG=freertos_config.h
	-DSQLITE_CUSTOM_INCLUDE=sqlite_config.h
	-DACTOR_CONFIG=app_config.h
	-DOD_CONFIG=od_config.h
	-DHEAP_CONFIG=heap_config.h
	-DFREERTOS_PORT=posix
	-DACTOR_NODE_USE_CANOPEN=0
	-DACTOR_NODE_USE_DATABASE=0
	-Werror
	-Wshadow
	-Wredundant-decls
	-Wstrict-prototypes
	-Wno-error=unused-parameter
	-Wno-error=unused-function
	-Wno-unused-parameter
	-Wno-unused-variable
	-Wno-unused-parameter

build_src_filter = +<*> -<dictionaries/>
extra_scripts = pre:scripts/overlay_library_json.py
	
lib_deps =
#	sqlite3=git@github.com:azadkuh/sqlite-amalgamation.git
	littlefs=git@github.com:littlefs-project/littlefs.git
	CANopenNode=git@github.com:CANopenNode/CANopenNode.git

[resolved_deps]
lib_deps = ${env.lib_deps}
	CANopenCM3
	actor_cm3
	actor_node
	actor_drivers
	actor_rtos
	CANopenOD

[env:native]
build_flags = ${env.build_flags}
	-DFREERTOS_PORT_CM3
platform=native
lib_ignore = 
	CANopenCM3
	actor_cm3
	#actor_database

[cm3]
build_flags = ${env.build_flags}
	-DFREERTOS_PORT_CM3 
lib_deps = ${env.lib_deps}
lib_ignore = 
	CANopenBlank
	CANopenOD
	
	
[debug]
debug_build_flags = 
	-Og -g2 -ggdb2 -DSEMIHOSTING -DDEBUG --specs=rdimon.specs -lrdimon -lnosys
debug_extra_cmds = 
	monitor arm semihosting enable
	set remotetimeout 100000
debug_init_break = tbreak vApplicationMallocFailedHook	
debug_tool = stlink
debug_port = :3333

[bluepill_f103c8]
board = genericSTM32F103CB
board_build.mcu = STM32F103C8T6

[black_f407zg]
board = black_f407zg
build_src_filter = ${env.build_src_filter} -<definitions/*.c> +<definitions/enums.*>

[env:f407zg_mothership]
framework = libopencm3
extends = resolved_deps, debug, cm3, black_f407zg
build_flags = ${cm3.build_flags} 
	-DACTOR_NODE_MOTHERSHIP 

[env:f407vg_mothership]
framework = libopencm3
extends = resolved_deps, debug, cm3
platform = ststm32
board = disco_f407vg
build_flags = ${cm3.build_flags} 
	-DACTOR_NODE_MOTHERSHIP 
## ----- Settings below are for Antmicro Renode integration ----- ##
# Monitor port for Renode integration
monitor_port = socket://localhost:1234
monitor_speed = 115200
# Upload settings for Renode integration
# Here we use uart2 that is the default UART attached in Arduino
# We have to open the UART2 window since the detfault is opening uart4
upload_command = renode $UPLOAD_FLAGS
upload_flags =
    -e include @scripts/single-node/stm32f4_discovery.resc
    -e machine StartGdbServer 3333 True
    -e logLevel 3           ;Loglevel = Error
    -e emulation CreateServerSocketTerminal 1234 \"externalUART\"
    -e connector Connect uart2 externalUART
    -e showAnalyzer uart2
    -e sysbus LoadELF @$SOURCE
    -e start
# Debug settings for Renode integration
debug_tool = custom
debug_port = localhost:3333
debug_server = renode
    --hide-log
    -e include @scripts/single-node/stm32f4_discovery.resc
    -e machine StartGdbServer 3333 True
    -e logLevel 3           ;Loglevel = Error
    -e emulation CreateServerSocketTerminal 1234 "externalUART"
    -e connector Connect uart2 externalUART
    -e showAnalyzer uart2
debug_extra_cmds =
    monitor start