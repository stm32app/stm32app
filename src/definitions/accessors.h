#include <actor/accessors.h>
#include <actor/stubs.h>
#include <actor/types.h>
#define actor_assert_type(actor, index) (actor_assert(actor->interface->type == index), actor)
/* This file is autogenerated of CANopen profile, dont edit it manually */

typedef enum device_circuit_properties_indecies {
  DEVICE_CIRCUIT_PORT = 0x01,
  DEVICE_CIRCUIT_PIN = 0x02,
  DEVICE_CIRCUIT_LIMIT_CURRENT = 0x03,
  DEVICE_CIRCUIT_LIMIT_VOLTAGE = 0x04,
  DEVICE_CIRCUIT_PSU_INDEX = 0x05,
  DEVICE_CIRCUIT_SENSOR_INDEX = 0x06,
  DEVICE_CIRCUIT_PHASE = 0x07,
  DEVICE_CIRCUIT_DUTY_CYCLE = 0x08,
  DEVICE_CIRCUIT_CURRENT = 0x09,
  DEVICE_CIRCUIT_VOLTAGE = 0x0A,
  DEVICE_CIRCUIT_CONSUMERS = 0x0B
} device_circuit_properties_indecies_t;

/* 0x40XX01: undefined */
#define device_circuit_get_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x4000), 0x01))
/* 0x40XX02: Relay GPIO port (1 for A, 2 for B, etc), required */
#define device_circuit_get_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x4000), 0x02))
/* 0x40XX03: Relay GPIO pin, required */
#define device_circuit_get_limit_current(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x4000), 0x03))
/* 0x40XX04: Relay will turn off if measured current surpasses this limit */
#define device_circuit_get_limit_voltage(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x4000), 0x04))
/* 0x40XX05: Currently there is no way to enforce voltage limit */
#define device_circuit_get_psu_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x4000), 0x05))
/* 0x40XX06: PSU circuit is turned on when one of their dependends is turned on */
#define device_circuit_get_sensor_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x4000), 0x06))
/* 0x40XX07: Hall sensor measures current and allows circuit to become a circuit breaker */
#define device_circuit_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x4000), 0x07))
/* 0x40XX07: Hall sensor measures current and allows circuit to become a circuit breaker */
#define device_circuit_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x4000), 0x07, (uint32_t) (value), sizeof(uint8_t))
/* 0x40XX08: Phase x */
#define device_circuit_get_duty_cycle(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x4000), 0x08))
/* 0x40XX08: Phase x */
#define device_circuit_set_duty_cycle(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x4000), 0x08, (uint32_t) (value), sizeof(uint16_t))
/* 0x40XX09: null */
#define device_circuit_get_current(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x4000), 0x09))
/* 0x40XX09: null */
#define device_circuit_set_current(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x4000), 0x09, (uint32_t) (value), sizeof(uint16_t))
/* 0x40XX0A: Current  x */
#define device_circuit_get_voltage(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x4000), 0x0A))
/* 0x40XX0A: Current  x */
#define device_circuit_set_voltage(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x4000), 0x0A, (uint32_t) (value), sizeof(uint16_t))
/* 0x40XX0B: null */
#define device_circuit_get_consumers(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x4000), 0x0B))
/* 0x40XX0B: null */
#define device_circuit_set_consumers(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x4000), 0x0B, (uint32_t) (value), sizeof(uint8_t))
typedef enum module_mcu_properties_indecies {
  MODULE_MCU_FAMILY = 0x01,
  MODULE_MCU_BOARD_TYPE = 0x02,
  MODULE_MCU_STORAGE_INDEX = 0x03,
  MODULE_MCU_PHASE = 0x04,
  MODULE_MCU_CPU_TEMPERATURE = 0x05,
  MODULE_MCU_STARTUP_TIME = 0x06
} module_mcu_properties_indecies_t;

/* 0x60XX01: null */
#define module_mcu_get_family(actor) ((char *) actor_property_pointer_get(actor_of_type(actor, 0x6000), 0x01))
/* 0x60XX02: null */
#define module_mcu_get_board_type(actor) ((char *) actor_property_pointer_get(actor_of_type(actor, 0x6000), 0x02))
/* 0x60XX03: null */
#define module_mcu_get_storage_index(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x6000), 0x03))
/* 0x60XX04: null */
#define module_mcu_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6000), 0x04))
/* 0x60XX04: null */
#define module_mcu_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6000), 0x04, (uint32_t) (value), sizeof(uint8_t))
/* 0x60XX05: null */
#define module_mcu_get_cpu_temperature(actor) *((int16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6000), 0x05))
/* 0x60XX05: null */
#define module_mcu_set_cpu_temperature(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6000), 0x05, (uint32_t) (value), sizeof(int16_t))
/* 0x60XX06: In milliseconds */
#define module_mcu_get_startup_time(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x6000), 0x06))
/* 0x60XX06: In milliseconds */
#define module_mcu_set_startup_time(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6000), 0x06, (uint32_t) (value), sizeof(uint32_t))
typedef enum actor_canopen_properties_indecies {
  ACTOR_CANOPEN_CAN_INDEX = 0x01,
  ACTOR_CANOPEN_CAN_FIFO_INDEX = 0x02,
  ACTOR_CANOPEN_GREEN_LED_INDEX = 0x03,
  ACTOR_CANOPEN_RED_LED_INDEX = 0x04,
  ACTOR_CANOPEN_FIRST_HB_TIME = 0x05,
  ACTOR_CANOPEN_SDO_SERVER_TIMEOUT = 0x06,
  ACTOR_CANOPEN_SDO_CLIENT_TIMEOUT = 0x07,
  ACTOR_CANOPEN_PHASE = 0x08,
  ACTOR_CANOPEN_NODE_ID = 0x09,
  ACTOR_CANOPEN_BITRATE = 0x0A
} actor_canopen_properties_indecies_t;

/* 0x60XX01: Values other than zero will prevent device from initializing */
#define actor_canopen_get_can_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6020), 0x01))
/* 0x60XX02: Values other than zero will prevent device from initializing */
#define actor_canopen_get_can_fifo_index(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6020), 0x02))
/* 0x60XX03: null */
#define actor_canopen_get_green_led_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6020), 0x03))
/* 0x60XX04: null */
#define actor_canopen_get_red_led_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6020), 0x04))
/* 0x60XX05: null */
#define actor_canopen_get_first_hb_time(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6020), 0x05))
/* 0x60XX06: in MS */
#define actor_canopen_get_sdo_server_timeout(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6020), 0x06))
/* 0x60XX07: in MS */
#define actor_canopen_get_sdo_client_timeout(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6020), 0x07))
/* 0x60XX08: null */
#define actor_canopen_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6020), 0x08))
/* 0x60XX08: null */
#define actor_canopen_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6020), 0x08, (uint32_t) (value), sizeof(uint8_t))
/* 0x60XX09: Node ID */
#define actor_canopen_get_node_id(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6020), 0x09))
/* 0x60XX09: Node ID */
#define actor_canopen_set_node_id(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6020), 0x09, (uint32_t) (value), sizeof(uint8_t))
/* 0x60XX0A: Negotiated bitrate */
#define actor_canopen_get_bitrate(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6020), 0x0A))
/* 0x60XX0A: Negotiated bitrate */
#define actor_canopen_set_bitrate(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6020), 0x0A, (uint32_t) (value), sizeof(uint16_t))
typedef enum actor_database_properties_indecies {
  ACTOR_DATABASE_STORAGE_INDEX = 0x01,
  ACTOR_DATABASE_JOURNAL_BUFFER_SIZE = 0x02,
  ACTOR_DATABASE_PATH = 0x03,
  ACTOR_DATABASE_PHASE = 0x04
} actor_database_properties_indecies_t;

/* 0x60XX01: null */
#define actor_database_get_storage_index(actor) *((int16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6080), 0x01))
/* 0x60XX02: null */
#define actor_database_get_journal_buffer_size(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x6080), 0x02))
/* 0x60XX03: null */
#define actor_database_get_path(actor) ((char *) actor_property_pointer_get(actor_of_type(actor, 0x6080), 0x03))
/* 0x60XX04: null */
#define actor_database_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6080), 0x04))
/* 0x60XX04: null */
#define actor_database_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6080), 0x04, (uint32_t) (value), sizeof(uint8_t))
typedef enum module_timer_properties_indecies {
  MODULE_TIMER_PRESCALER = 0x01,
  MODULE_TIMER_INITIAL_SUBSCRIPTIONS_COUNT = 0x02,
  MODULE_TIMER_PERIOD = 0x03,
  MODULE_TIMER_FREQUENCY = 0x04,
  MODULE_TIMER_PHASE = 0x05
} module_timer_properties_indecies_t;

/* 0x61XX01: null */
#define module_timer_get_prescaler(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6100), 0x01))
/* 0x61XX02: How many subscriptions can timer hold at once */
#define module_timer_get_initial_subscriptions_count(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6100), 0x02))
/* 0x61XX03: Counter overflow value (usually max value, 16 or 32bit depending on counter) */
#define module_timer_get_period(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x6100), 0x03))
/* 0x61XX04: How many times a second should timer fire */
#define module_timer_get_frequency(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x6100), 0x04))
/* 0x61XX05: null */
#define module_timer_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6100), 0x05))
/* 0x61XX05: null */
#define module_timer_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6100), 0x05, (uint32_t) (value), sizeof(uint8_t))
typedef enum transport_can_properties_indecies {
  TRANSPORT_CAN_TX_PORT = 0x01,
  TRANSPORT_CAN_TX_PIN = 0x02,
  TRANSPORT_CAN_RX_PORT = 0x03,
  TRANSPORT_CAN_RX_PIN = 0x04,
  TRANSPORT_CAN_BITRATE = 0x05,
  TRANSPORT_CAN_BRP = 0x06,
  TRANSPORT_CAN_SJW = 0x07,
  TRANSPORT_CAN_PROP = 0x08,
  TRANSPORT_CAN_PH_SEG1 = 0x09,
  TRANSPORT_CAN_PH_SEG2 = 0x0A,
  TRANSPORT_CAN_PHASE = 0x0B
} transport_can_properties_indecies_t;

/* 0x62XX01: null */
#define transport_can_get_tx_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6200), 0x01))
/* 0x62XX02: null */
#define transport_can_get_tx_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6200), 0x02))
/* 0x62XX03: null */
#define transport_can_get_rx_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6200), 0x03))
/* 0x62XX04: null */
#define transport_can_get_rx_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6200), 0x04))
/* 0x62XX05: null */
#define transport_can_get_bitrate(actor) *((int16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6200), 0x05))
/* 0x62XX06: null */
#define transport_can_get_brp(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6200), 0x06))
/* 0x62XX07: null */
#define transport_can_get_sjw(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6200), 0x07))
/* 0x62XX08: null */
#define transport_can_get_prop(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6200), 0x08))
/* 0x62XX09: null */
#define transport_can_get_ph_seg1(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6200), 0x09))
/* 0x62XX0A: null */
#define transport_can_get_ph_seg2(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6200), 0x0A))
/* 0x62XX0B: null */
#define transport_can_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6200), 0x0B))
/* 0x62XX0B: null */
#define transport_can_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6200), 0x0B, (uint32_t) (value), sizeof(uint8_t))
typedef enum transport_spi_properties_indecies {
  TRANSPORT_SPI_IS_SLAVE = 0x01,
  TRANSPORT_SPI_SOFTWARE_SS_CONTROL = 0x02,
  TRANSPORT_SPI_MODE = 0x03,
  TRANSPORT_SPI_DMA_RX_UNIT = 0x04,
  TRANSPORT_SPI_DMA_RX_STREAM = 0x05,
  TRANSPORT_SPI_DMA_RX_CHANNEL = 0x06,
  TRANSPORT_SPI_DMA_RX_IDLE_TIMEOUT = 0x07,
  TRANSPORT_SPI_DMA_RX_CIRCULAR_BUFFER_SIZE = 0x08,
  TRANSPORT_SPI_RX_POOL_MAX_SIZE = 0x09,
  TRANSPORT_SPI_RX_POOL_INITIAL_SIZE = 0x0A,
  TRANSPORT_SPI_RX_POOL_BLOCK_SIZE = 0x0B,
  TRANSPORT_SPI_DMA_TX_UNIT = 0x0C,
  TRANSPORT_SPI_DMA_TX_STREAM = 0x0D,
  TRANSPORT_SPI_DMA_TX_CHANNEL = 0x0E,
  TRANSPORT_SPI_AF_INDEX = 0x0F,
  TRANSPORT_SPI_SS_PORT = 0x10,
  TRANSPORT_SPI_SS_PIN = 0x11,
  TRANSPORT_SPI_SCK_PORT = 0x12,
  TRANSPORT_SPI_SCK_PIN = 0x13,
  TRANSPORT_SPI_MISO_PORT = 0x14,
  TRANSPORT_SPI_MISO_PIN = 0x15,
  TRANSPORT_SPI_MOSI_PORT = 0x16,
  TRANSPORT_SPI_MOSI_PIN = 0x17,
  TRANSPORT_SPI_PHASE = 0x18
} transport_spi_properties_indecies_t;

/* 0x62XX01: null */
#define transport_spi_get_is_slave(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x01))
/* 0x62XX02: null */
#define transport_spi_get_software_ss_control(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x02))
/* 0x62XX03: null */
#define transport_spi_get_mode(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x03))
/* 0x62XX04: null */
#define transport_spi_get_dma_rx_unit(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x04))
/* 0x62XX05: null */
#define transport_spi_get_dma_rx_stream(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x05))
/* 0x62XX06: null */
#define transport_spi_get_dma_rx_channel(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x06))
/* 0x62XX07: In microseconds */
#define transport_spi_get_dma_rx_idle_timeout(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x07))
/* 0x62XX08: null */
#define transport_spi_get_dma_rx_circular_buffer_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x08))
/* 0x62XX09: null */
#define transport_spi_get_rx_pool_max_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x09))
/* 0x62XX0A: null */
#define transport_spi_get_rx_pool_initial_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x0A))
/* 0x62XX0B: null */
#define transport_spi_get_rx_pool_block_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x0B))
/* 0x62XX0C: null */
#define transport_spi_get_dma_tx_unit(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x0C))
/* 0x62XX0D: null */
#define transport_spi_get_dma_tx_stream(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x0D))
/* 0x62XX0E: null */
#define transport_spi_get_dma_tx_channel(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x0E))
/* 0x62XX0F: Index of the corresponding AF function for gpio pins */
#define transport_spi_get_af_index(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x0F))
/* 0x62XX10: null */
#define transport_spi_get_ss_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x10))
/* 0x62XX11: null */
#define transport_spi_get_ss_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x11))
/* 0x62XX12: null */
#define transport_spi_get_sck_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x12))
/* 0x62XX13: null */
#define transport_spi_get_sck_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x13))
/* 0x62XX14: null */
#define transport_spi_get_miso_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x14))
/* 0x62XX15: null */
#define transport_spi_get_miso_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x15))
/* 0x62XX16: null */
#define transport_spi_get_mosi_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x16))
/* 0x62XX17: null */
#define transport_spi_get_mosi_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x17))
/* 0x62XX18: null */
#define transport_spi_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6220), 0x18))
/* 0x62XX18: null */
#define transport_spi_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6220), 0x18, (uint32_t) (value), sizeof(uint8_t))
typedef enum transport_usart_properties_indecies {
  TRANSPORT_USART_DMA_RX_UNIT = 0x01,
  TRANSPORT_USART_DMA_RX_STREAM = 0x02,
  TRANSPORT_USART_DMA_RX_CHANNEL = 0x03,
  TRANSPORT_USART_DMA_RX_CIRCULAR_BUFFER_SIZE = 0x04,
  TRANSPORT_USART_DMA_TX_UNIT = 0x05,
  TRANSPORT_USART_DMA_TX_STREAM = 0x06,
  TRANSPORT_USART_DMA_TX_CHANNEL = 0x07,
  TRANSPORT_USART_BAUDRATE = 0x08,
  TRANSPORT_USART_DATABITS = 0x09,
  TRANSPORT_USART_PHASE = 0x0A
} transport_usart_properties_indecies_t;

/* 0x62XX01: null */
#define transport_usart_get_dma_rx_unit(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6240), 0x01))
/* 0x62XX02: null */
#define transport_usart_get_dma_rx_stream(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6240), 0x02))
/* 0x62XX03: null */
#define transport_usart_get_dma_rx_channel(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6240), 0x03))
/* 0x62XX04: null */
#define transport_usart_get_dma_rx_circular_buffer_size(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6240), 0x04))
/* 0x62XX05: null */
#define transport_usart_get_dma_tx_unit(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6240), 0x05))
/* 0x62XX06: null */
#define transport_usart_get_dma_tx_stream(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6240), 0x06))
/* 0x62XX07: null */
#define transport_usart_get_dma_tx_channel(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6240), 0x07))
/* 0x62XX08: null */
#define transport_usart_get_baudrate(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x6240), 0x08))
/* 0x62XX09: null */
#define transport_usart_get_databits(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6240), 0x09))
/* 0x62XX0A: null */
#define transport_usart_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6240), 0x0A))
/* 0x62XX0A: null */
#define transport_usart_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6240), 0x0A, (uint32_t) (value), sizeof(uint8_t))
typedef enum transport_i2c_properties_indecies {
  TRANSPORT_I2C_DMA_RX_UNIT = 0x01,
  TRANSPORT_I2C_DMA_RX_STREAM = 0x02,
  TRANSPORT_I2C_DMA_RX_CHANNEL = 0x03,
  TRANSPORT_I2C_DMA_RX_CIRCULAR_BUFFER_SIZE = 0x04,
  TRANSPORT_I2C_RX_POOL_MAX_SIZE = 0x05,
  TRANSPORT_I2C_RX_POOL_INITIAL_SIZE = 0x06,
  TRANSPORT_I2C_RX_POOL_BLOCK_SIZE = 0x07,
  TRANSPORT_I2C_DMA_TX_UNIT = 0x08,
  TRANSPORT_I2C_DMA_TX_STREAM = 0x09,
  TRANSPORT_I2C_DMA_TX_CHANNEL = 0x0A,
  TRANSPORT_I2C_AF = 0x0B,
  TRANSPORT_I2C_SMBA_PIN = 0x0C,
  TRANSPORT_I2C_SMBA_PORT = 0x0D,
  TRANSPORT_I2C_SDA_PORT = 0x0E,
  TRANSPORT_I2C_SDA_PIN = 0x0F,
  TRANSPORT_I2C_SCL_PORT = 0x10,
  TRANSPORT_I2C_SCL_PIN = 0x11,
  TRANSPORT_I2C_FREQUENCY = 0x12,
  TRANSPORT_I2C_DATABITS = 0x13,
  TRANSPORT_I2C_PHASE = 0x14,
  TRANSPORT_I2C_SLAVE_ADDRESS = 0x15
} transport_i2c_properties_indecies_t;

/* 0x62XX01: null */
#define transport_i2c_get_dma_rx_unit(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x01))
/* 0x62XX02: null */
#define transport_i2c_get_dma_rx_stream(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x02))
/* 0x62XX03: null */
#define transport_i2c_get_dma_rx_channel(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x03))
/* 0x62XX04: null */
#define transport_i2c_get_dma_rx_circular_buffer_size(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x04))
/* 0x62XX05: null */
#define transport_i2c_get_rx_pool_max_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x05))
/* 0x62XX06: null */
#define transport_i2c_get_rx_pool_initial_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x06))
/* 0x62XX07: null */
#define transport_i2c_get_rx_pool_block_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x07))
/* 0x62XX08: null */
#define transport_i2c_get_dma_tx_unit(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x08))
/* 0x62XX09: null */
#define transport_i2c_get_dma_tx_stream(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x09))
/* 0x62XX0A: null */
#define transport_i2c_get_dma_tx_channel(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x0A))
/* 0x62XX0B: null */
#define transport_i2c_get_af(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x0B))
/* 0x62XX0C: null */
#define transport_i2c_get_smba_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x0C))
/* 0x62XX0D: null */
#define transport_i2c_get_smba_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x0D))
/* 0x62XX0E: null */
#define transport_i2c_get_sda_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x0E))
/* 0x62XX0F: null */
#define transport_i2c_get_sda_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x0F))
/* 0x62XX10: null */
#define transport_i2c_get_scl_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x10))
/* 0x62XX11: null */
#define transport_i2c_get_scl_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x11))
/* 0x62XX12: in mhz */
#define transport_i2c_get_frequency(actor) *((int8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x12))
/* 0x62XX13: null */
#define transport_i2c_get_databits(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x13))
/* 0x62XX14: null */
#define transport_i2c_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x14))
/* 0x62XX14: null */
#define transport_i2c_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6260), 0x14, (uint32_t) (value), sizeof(uint8_t))
/* 0x62XX15: null */
#define transport_i2c_get_slave_address(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6260), 0x15))
/* 0x62XX15: null */
#define transport_i2c_set_slave_address(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6260), 0x15, (uint32_t) (value), sizeof(uint8_t))
typedef enum transport_modbus_properties_indecies {
  TRANSPORT_MODBUS_USART_INDEX = 0x01,
  TRANSPORT_MODBUS_RTS_PORT = 0x02,
  TRANSPORT_MODBUS_RTS_PIN = 0x03,
  TRANSPORT_MODBUS_SLAVE_ADDRESS = 0x04,
  TRANSPORT_MODBUS_TIMEOUT = 0x05,
  TRANSPORT_MODBUS_PHASE = 0x06
} transport_modbus_properties_indecies_t;

/* 0x62XX01: Index of USART device */
#define transport_modbus_get_usart_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6280), 0x01))
/* 0x62XX02: GPIO port for ready-to-send */
#define transport_modbus_get_rts_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6280), 0x02))
/* 0x62XX03: GPIO pin for ready-to-send */
#define transport_modbus_get_rts_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6280), 0x03))
/* 0x62XX04: Leave 0 for master device */
#define transport_modbus_get_slave_address(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6280), 0x04))
/* 0x62XX05: undefined */
#define transport_modbus_get_timeout(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6280), 0x05))
/* 0x62XX06: in us */
#define transport_modbus_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6280), 0x06))
/* 0x62XX06: in us */
#define transport_modbus_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6280), 0x06, (uint32_t) (value), sizeof(uint8_t))
typedef enum transport_sdio_properties_indecies {
  TRANSPORT_SDIO_DMA_UNIT = 0x01,
  TRANSPORT_SDIO_DMA_STREAM = 0x02,
  TRANSPORT_SDIO_DMA_CHANNEL = 0x03,
  TRANSPORT_SDIO_AF = 0x04,
  TRANSPORT_SDIO_D0_PORT = 0x05,
  TRANSPORT_SDIO_D0_PIN = 0x06,
  TRANSPORT_SDIO_D1_PORT = 0x07,
  TRANSPORT_SDIO_D1_PIN = 0x08,
  TRANSPORT_SDIO_D2_PORT = 0x09,
  TRANSPORT_SDIO_D2_PIN = 0x0A,
  TRANSPORT_SDIO_D3_PORT = 0x0B,
  TRANSPORT_SDIO_D3_PIN = 0x0C,
  TRANSPORT_SDIO_CK_PORT = 0x0D,
  TRANSPORT_SDIO_CK_PIN = 0x0E,
  TRANSPORT_SDIO_CMD_PORT = 0x0F,
  TRANSPORT_SDIO_CMD_PIN = 0x10,
  TRANSPORT_SDIO_PHASE = 0x11
} transport_sdio_properties_indecies_t;

/* 0x62A001: null */
#define transport_sdio_get_dma_unit(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x01))
/* 0x62A002: null */
#define transport_sdio_get_dma_stream(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x02))
/* 0x62A003: null */
#define transport_sdio_get_dma_channel(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x03))
/* 0x62A004: null */
#define transport_sdio_get_af(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x04))
/* 0x62A005: null */
#define transport_sdio_get_d0_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x05))
/* 0x62A006: null */
#define transport_sdio_get_d0_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x06))
/* 0x62A007: null */
#define transport_sdio_get_d1_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x07))
/* 0x62A008: null */
#define transport_sdio_get_d1_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x08))
/* 0x62A009: null */
#define transport_sdio_get_d2_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x09))
/* 0x62A00A: null */
#define transport_sdio_get_d2_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x0A))
/* 0x62A00B: null */
#define transport_sdio_get_d3_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x0B))
/* 0x62A00C: null */
#define transport_sdio_get_d3_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x0C))
/* 0x62A00D: null */
#define transport_sdio_get_ck_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x0D))
/* 0x62A00E: null */
#define transport_sdio_get_ck_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x0E))
/* 0x62A00F: null */
#define transport_sdio_get_cmd_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x0F))
/* 0x62A010: null */
#define transport_sdio_get_cmd_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x10))
/* 0x62A011: null */
#define transport_sdio_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x62A0), 0x11))
/* 0x62A011: null */
#define transport_sdio_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x62A0), 0x11, (uint32_t) (value), sizeof(uint8_t))
typedef enum module_adc_properties_indecies {
  MODULE_ADC_INTERVAL = 0x01,
  MODULE_ADC_SAMPLE_COUNT_PER_CHANNEL = 0x02,
  MODULE_ADC_DMA_UNIT = 0x03,
  MODULE_ADC_DMA_STREAM = 0x04,
  MODULE_ADC_DMA_CHANNEL = 0x05,
  MODULE_ADC_PHASE = 0x06
} module_adc_properties_indecies_t;

/* 0x63XX01: null */
#define module_adc_get_interval(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6300), 0x01))
/* 0x63XX02: null */
#define module_adc_get_sample_count_per_channel(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x6300), 0x02))
/* 0x63XX03: null */
#define module_adc_get_dma_unit(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6300), 0x03))
/* 0x63XX04: null */
#define module_adc_get_dma_stream(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6300), 0x04))
/* 0x63XX05: null */
#define module_adc_get_dma_channel(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6300), 0x05))
/* 0x63XX06: null */
#define module_adc_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x6300), 0x06))
/* 0x63XX06: null */
#define module_adc_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x6300), 0x06, (uint32_t) (value), sizeof(uint8_t))
typedef enum storage_eeprom_properties_indecies {
  STORAGE_EEPROM_TRANSPORT_INDEX = 0x01,
  STORAGE_EEPROM_TRANSPORT_ADDRESS = 0x02,
  STORAGE_EEPROM_PAGE_SIZE = 0x03,
  STORAGE_EEPROM_SIZE = 0x04,
  STORAGE_EEPROM_PHASE = 0x05
} storage_eeprom_properties_indecies_t;

/* 0x70XX01: null */
#define storage_eeprom_get_transport_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7000), 0x01))
/* 0x70XX02: null */
#define storage_eeprom_get_transport_address(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7000), 0x02))
/* 0x70XX03: null */
#define storage_eeprom_get_page_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7000), 0x03))
/* 0x70XX04: null */
#define storage_eeprom_get_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7000), 0x04))
/* 0x70XX05: null */
#define storage_eeprom_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x7000), 0x05))
/* 0x70XX05: null */
#define storage_eeprom_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7000), 0x05, (uint32_t) (value), sizeof(uint8_t))
typedef enum storage_w25_properties_indecies {
  STORAGE_W25_SPI_INDEX = 0x01,
  STORAGE_W25_PAGE_SIZE = 0x02,
  STORAGE_W25_SIZE = 0x03,
  STORAGE_W25_PHASE = 0x04
} storage_w25_properties_indecies_t;

/* 0x71XX01: null */
#define storage_w25_get_spi_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7100), 0x01))
/* 0x71XX02: null */
#define storage_w25_get_page_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7100), 0x02))
/* 0x71XX03: null */
#define storage_w25_get_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7100), 0x03))
/* 0x71XX04: null */
#define storage_w25_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x7100), 0x04))
/* 0x71XX04: null */
#define storage_w25_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7100), 0x04, (uint32_t) (value), sizeof(uint8_t))
typedef enum storage_flash_properties_indecies {
  STORAGE_FLASH_START_ADDRESS = 0x01,
  STORAGE_FLASH_PAGE_SIZE = 0x02,
  STORAGE_FLASH_SIZE = 0x03,
  STORAGE_FLASH_PHASE = 0x04
} storage_flash_properties_indecies_t;

/* 0x72XX01: null */
#define storage_flash_get_start_address(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7200), 0x01))
/* 0x72XX02: null */
#define storage_flash_get_page_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7200), 0x02))
/* 0x72XX03: null */
#define storage_flash_get_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7200), 0x03))
/* 0x72XX04: null */
#define storage_flash_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x7200), 0x04))
/* 0x72XX04: null */
#define storage_flash_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7200), 0x04, (uint32_t) (value), sizeof(uint8_t))
typedef enum memory_sram_properties_indecies {
  MEMORY_SRAM_DISABLED = 0x01,
  MEMORY_SRAM_TRANSPORT_INDEX = 0x02,
  MEMORY_SRAM_TRANSPORT_ADDRESS = 0x03,
  MEMORY_SRAM_PAGE_SIZE = 0x04,
  MEMORY_SRAM_SIZE = 0x05,
  MEMORY_SRAM_PHASE = 0x06
} memory_sram_properties_indecies_t;

/* 0x73XX01: null */
#define memory_sram_get_disabled(actor) *((int16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7300), 0x01))
/* 0x73XX02: null */
#define memory_sram_get_transport_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7300), 0x02))
/* 0x73XX03: null */
#define memory_sram_get_transport_address(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7300), 0x03))
/* 0x73XX04: null */
#define memory_sram_get_page_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7300), 0x04))
/* 0x73XX05: null */
#define memory_sram_get_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7300), 0x05))
/* 0x73XX06: null */
#define memory_sram_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x7300), 0x06))
/* 0x73XX06: null */
#define memory_sram_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7300), 0x06, (uint32_t) (value), sizeof(uint8_t))
typedef enum storage_at24c_properties_indecies {
  STORAGE_AT24C_I2C_INDEX = 0x01,
  STORAGE_AT24C_I2C_ADDRESS = 0x02,
  STORAGE_AT24C_START_ADDRESS = 0x03,
  STORAGE_AT24C_PAGE_SIZE = 0x04,
  STORAGE_AT24C_SIZE = 0x05,
  STORAGE_AT24C_PHASE = 0x06
} storage_at24c_properties_indecies_t;

/* 0x74XX01: null */
#define storage_at24c_get_i2c_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7400), 0x01))
/* 0x74XX02: null */
#define storage_at24c_get_i2c_address(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x7400), 0x02))
/* 0x74XX03: null */
#define storage_at24c_get_start_address(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7400), 0x03))
/* 0x74XX04: null */
#define storage_at24c_get_page_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7400), 0x04))
/* 0x74XX05: null */
#define storage_at24c_get_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7400), 0x05))
/* 0x74XX06: null */
#define storage_at24c_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x7400), 0x06))
/* 0x74XX06: null */
#define storage_at24c_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7400), 0x06, (uint32_t) (value), sizeof(uint8_t))
typedef enum storage_sdcard_properties_indecies {
  STORAGE_SDCARD_SDIO_INDEX = 0x01,
  STORAGE_SDCARD_FS_READ_SIZE = 0x02,
  STORAGE_SDCARD_FS_PROGRAM_SIZE = 0x03,
  STORAGE_SDCARD_FS_BLOCK_CYCLES = 0x04,
  STORAGE_SDCARD_FS_CACHE_SIZE = 0x05,
  STORAGE_SDCARD_FS_LOOKAHEAD_SIZE = 0x06,
  STORAGE_SDCARD_FS_NAME_MAX_SIZE = 0x07,
  STORAGE_SDCARD_FS_FILE_MAX_SIZE = 0x08,
  STORAGE_SDCARD_FS_ATTR_MAX_SIZE = 0x09,
  STORAGE_SDCARD_FS_METADATA_MAX_SIZE = 0x0A,
  STORAGE_SDCARD_FS_VOLUME_NAME = 0x0B,
  STORAGE_SDCARD_PHASE = 0x0C,
  STORAGE_SDCARD_CAPACITY = 0x0D,
  STORAGE_SDCARD_BLOCK_SIZE = 0x0E,
  STORAGE_SDCARD_BLOCK_COUNT = 0x0F,
  STORAGE_SDCARD_MAX_BUS_CLOCK_FREQUENCY = 0x10,
  STORAGE_SDCARD_CSD_VERSION = 0x11,
  STORAGE_SDCARD_RELATIVE_CARD_ADDRESS = 0x12,
  STORAGE_SDCARD_MANUFACTURER_ID = 0x13,
  STORAGE_SDCARD_OEM_ID = 0x14,
  STORAGE_SDCARD_PRODUCT_NAME = 0x15,
  STORAGE_SDCARD_PRODUCT_REVISION = 0x16,
  STORAGE_SDCARD_SERIAL_NUMBER = 0x17,
  STORAGE_SDCARD_MANUFACTURING_DATE = 0x18,
  STORAGE_SDCARD_VERSION = 0x19,
  STORAGE_SDCARD_HIGH_CAPACITY = 0x1A
} storage_sdcard_properties_indecies_t;

/* 0x75XX01: null */
#define storage_sdcard_get_sdio_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x01))
/* 0x75XX02: Minimum size of a block read. All read operations will be a  multiple of this value. */
#define storage_sdcard_get_fs_read_size(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x02))
/* 0x75XX03: Minimum size of a block program. All program operations will be a multiple of this value. */
#define storage_sdcard_get_fs_program_size(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x03))
/* 0x75XX04: Number of erase cycles before littlefs evicts metadata logs and moves the metadata to another block. 

Suggested values are in the range 100-1000, with large values having better performance at the cost of less consistent wear distribution.

Set to -1 to disable block-level wear-leveling. */
#define storage_sdcard_get_fs_block_cycles(actor) *((int32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x04))
/* 0x75XX05: Size of block caches. Each cache buffers a portion of a block in RAM.
The littlefs needs a read cache, a program cache, and one additional cache per file. Larger caches can improve performance by storing more data and reducing the number of disk accesses. Must be a multiple of the read and program sizes, and a factor of the block size. */
#define storage_sdcard_get_fs_cache_size(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x05))
/* 0x75XX06: Size of the lookahead buffer in bytes. A larger lookahead buffer increases the number of blocks found during an allocation pass. 

The lookahead buffer is stored as a compact bitmap, so each byte of RAM can track 8 blocks. Must be a multiple of 8. */
#define storage_sdcard_get_fs_lookahead_size(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x06))
/* 0x75XX07: Optional upper limit on length of file names in bytes. 

No downside for larger names except the size of the info struct which is controlled by the LFS_NAME_MAX define. Defaults to LFS_NAME_MAX when zero. Stored in superblock and must be respected by other littlefs drivers. */
#define storage_sdcard_get_fs_name_max_size(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x07))
/* 0x75XX08: Optional upper limit on files in bytes. 

No downside for larger files but must be &lt;= LFS_FILE_MAX. Defaults to LFS_FILE_MAX when zero. Stored in superblock and must be respected by other littlefs drivers. */
#define storage_sdcard_get_fs_file_max_size(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x08))
/* 0x75XX09: Optional upper limit on custom attributes in bytes. 

No downside for larger attributes size but must be &lt;= LFS_ATTR_MAX. Defaults to LFS_ATTR_MAX when zero. */
#define storage_sdcard_get_fs_attr_max_size(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x09))
/* 0x75XX0A: Optional upper limit on total space given to metadata pairs in bytes. 

On devices with large blocks (e.g. 128kB) setting this to a low size (2-8kB) can help bound the metadata compaction time. Must be &lt;= block_size. Defaults to block_size when zero. */
#define storage_sdcard_get_fs_metadata_max_size(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x0A))
/* 0x75XX0B: Global handle for the storage */
#define storage_sdcard_get_fs_volume_name(actor) ((char *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x0B))
/* 0x75XX0C: null */
#define storage_sdcard_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x0C))
/* 0x75XX0C: null */
#define storage_sdcard_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x0C, (uint32_t) (value), sizeof(uint8_t))
/* 0x75XX0D: null */
#define storage_sdcard_get_capacity(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x0D))
/* 0x75XX0D: null */
#define storage_sdcard_set_capacity(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x0D, (uint32_t) (value), sizeof(uint32_t))
/* 0x75XX0E: null */
#define storage_sdcard_get_block_size(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x0E))
/* 0x75XX0E: null */
#define storage_sdcard_set_block_size(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x0E, (uint32_t) (value), sizeof(uint32_t))
/* 0x75XX0F: null */
#define storage_sdcard_get_block_count(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x0F))
/* 0x75XX0F: null */
#define storage_sdcard_set_block_count(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x0F, (uint32_t) (value), sizeof(uint32_t))
/* 0x75XX10: null */
#define storage_sdcard_get_max_bus_clock_frequency(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x10))
/* 0x75XX10: null */
#define storage_sdcard_set_max_bus_clock_frequency(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x10, (uint32_t) (value), sizeof(uint32_t))
/* 0x75XX11: null */
#define storage_sdcard_get_csd_version(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x11))
/* 0x75XX11: null */
#define storage_sdcard_set_csd_version(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x11, (uint32_t) (value), sizeof(uint8_t))
/* 0x75XX12: null */
#define storage_sdcard_get_relative_card_address(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x12))
/* 0x75XX12: null */
#define storage_sdcard_set_relative_card_address(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x12, (uint32_t) (value), sizeof(uint16_t))
/* 0x75XX13: null */
#define storage_sdcard_get_manufacturer_id(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x13))
/* 0x75XX13: null */
#define storage_sdcard_set_manufacturer_id(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x13, (uint32_t) (value), sizeof(uint8_t))
/* 0x75XX14: null */
#define storage_sdcard_get_oem_id(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x14))
/* 0x75XX14: null */
#define storage_sdcard_set_oem_id(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x14, (uint32_t) (value), sizeof(uint16_t))
/* 0x75XX15: null */
#define storage_sdcard_get_product_name(actor) ((char *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x15))
/* 0x75XX15: null */
#define storage_sdcard_set_product_name(actor, value, size) actor_property_string_set(actor_of_type(actor, 0x7500), 0x15, value, size)
/* 0x75XX16: null */
#define storage_sdcard_get_product_revision(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x16))
/* 0x75XX16: null */
#define storage_sdcard_set_product_revision(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x16, (uint32_t) (value), sizeof(uint8_t))
/* 0x75XX17: null */
#define storage_sdcard_get_serial_number(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x17))
/* 0x75XX17: null */
#define storage_sdcard_set_serial_number(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x17, (uint32_t) (value), sizeof(uint32_t))
/* 0x75XX18: null */
#define storage_sdcard_get_manufacturing_date(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x18))
/* 0x75XX18: null */
#define storage_sdcard_set_manufacturing_date(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x18, (uint32_t) (value), sizeof(uint16_t))
/* 0x75XX19: 2 or 1 */
#define storage_sdcard_get_version(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x19))
/* 0x75XX19: 2 or 1 */
#define storage_sdcard_set_version(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x19, (uint32_t) (value), sizeof(uint8_t))
/* 0x75XX1A: 1 for SDHC/SDXC card */
#define storage_sdcard_get_high_capacity(actor) *((bool_t *) actor_property_pointer_get(actor_of_type(actor, 0x7500), 0x1A))
/* 0x75XX1A: 1 for SDHC/SDXC card */
#define storage_sdcard_set_high_capacity(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x7500), 0x1A, (uint32_t) (value), sizeof(bool_t))
typedef enum input_sensor_properties_indecies {
  INPUT_SENSOR_DISABLED = 0x01,
  INPUT_SENSOR_PORT = 0x02,
  INPUT_SENSOR_PIN = 0x03,
  INPUT_SENSOR_ADC_INDEX = 0x04,
  INPUT_SENSOR_ADC_CHANNEL = 0x05,
  INPUT_SENSOR_PHASE = 0x06
} input_sensor_properties_indecies_t;

/* 0x80XX01: Values other than zero will prevent device from initializing */
#define input_sensor_get_disabled(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x8000), 0x01))
/* 0x80XX02: Analog GPIO port (1 for A, 2 for B, etc), required */
#define input_sensor_get_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8000), 0x02))
/* 0x80XX03: Analog GPIO pin, required */
#define input_sensor_get_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8000), 0x03))
/* 0x80XX04: OD Index of ADC unit that will take measurements, must play well with the gpio setup */
#define input_sensor_get_adc_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x8000), 0x04))
/* 0x80XX05: ADC channel unique for unit to handle measurements */
#define input_sensor_get_adc_channel(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8000), 0x05))
/* 0x80XX06: Current phase of a device (one of values in DEVICE_PHASE enum) */
#define input_sensor_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8000), 0x06))
/* 0x80XX06: Current phase of a device (one of values in DEVICE_PHASE enum) */
#define input_sensor_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x8000), 0x06, (uint32_t) (value), sizeof(uint8_t))
typedef enum control_touchscreen_properties_indecies {
  CONTROL_TOUCHSCREEN_SPI_INDEX = 0x01,
  CONTROL_TOUCHSCREEN_DC_PORT = 0x02,
  CONTROL_TOUCHSCREEN_DC_PIN = 0x03,
  CONTROL_TOUCHSCREEN_CS_PORT = 0x04,
  CONTROL_TOUCHSCREEN_CS_PIN = 0x05,
  CONTROL_TOUCHSCREEN_BUSY_PORT = 0x06,
  CONTROL_TOUCHSCREEN_BUSY_PIN = 0x07,
  CONTROL_TOUCHSCREEN_RESET_PORT = 0x08,
  CONTROL_TOUCHSCREEN_RESET_PIN = 0x09,
  CONTROL_TOUCHSCREEN_WIDTH = 0x0A,
  CONTROL_TOUCHSCREEN_HEIGHT = 0x0B,
  CONTROL_TOUCHSCREEN_MODE = 0x0C,
  CONTROL_TOUCHSCREEN_PHASE = 0x0D
} control_touchscreen_properties_indecies_t;

/* 0x81XX01: null */
#define control_touchscreen_get_spi_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x01))
/* 0x81XX02: null */
#define control_touchscreen_get_dc_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x02))
/* 0x81XX03: null */
#define control_touchscreen_get_dc_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x03))
/* 0x81XX04: null */
#define control_touchscreen_get_cs_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x04))
/* 0x81XX05: null */
#define control_touchscreen_get_cs_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x05))
/* 0x81XX06: null */
#define control_touchscreen_get_busy_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x06))
/* 0x81XX07: null */
#define control_touchscreen_get_busy_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x07))
/* 0x81XX08: null */
#define control_touchscreen_get_reset_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x08))
/* 0x81XX09: null */
#define control_touchscreen_get_reset_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x09))
/* 0x81XX0A: null */
#define control_touchscreen_get_width(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x0A))
/* 0x81XX0B: null */
#define control_touchscreen_get_height(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x0B))
/* 0x81XX0C: null */
#define control_touchscreen_get_mode(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x0C))
/* 0x81XX0D: null */
#define control_touchscreen_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x8100), 0x0D))
/* 0x81XX0D: null */
#define control_touchscreen_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x8100), 0x0D, (uint32_t) (value), sizeof(uint8_t))
typedef enum screen_epaper_properties_indecies {
  SCREEN_EPAPER_SPI_INDEX = 0x01,
  SCREEN_EPAPER_DC_PORT = 0x02,
  SCREEN_EPAPER_DC_PIN = 0x03,
  SCREEN_EPAPER_CS_PORT = 0x04,
  SCREEN_EPAPER_CS_PIN = 0x05,
  SCREEN_EPAPER_BUSY_PORT = 0x06,
  SCREEN_EPAPER_BUSY_PIN = 0x07,
  SCREEN_EPAPER_RESET_PORT = 0x08,
  SCREEN_EPAPER_RESET_PIN = 0x09,
  SCREEN_EPAPER_WIDTH = 0x0A,
  SCREEN_EPAPER_HEIGHT = 0x0B,
  SCREEN_EPAPER_MODE = 0x0C,
  SCREEN_EPAPER_PHASE = 0x0D
} screen_epaper_properties_indecies_t;

/* 0x90XX01: null */
#define screen_epaper_get_spi_index(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x01))
/* 0x90XX02: null */
#define screen_epaper_get_dc_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x02))
/* 0x90XX03: null */
#define screen_epaper_get_dc_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x03))
/* 0x90XX04: null */
#define screen_epaper_get_cs_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x04))
/* 0x90XX05: null */
#define screen_epaper_get_cs_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x05))
/* 0x90XX06: null */
#define screen_epaper_get_busy_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x06))
/* 0x90XX07: null */
#define screen_epaper_get_busy_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x07))
/* 0x90XX08: null */
#define screen_epaper_get_reset_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x08))
/* 0x90XX09: null */
#define screen_epaper_get_reset_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x09))
/* 0x90XX0A: null */
#define screen_epaper_get_width(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x0A))
/* 0x90XX0B: null */
#define screen_epaper_get_height(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x0B))
/* 0x90XX0C: null */
#define screen_epaper_get_mode(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x0C))
/* 0x90XX0D: null */
#define screen_epaper_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9000), 0x0D))
/* 0x90XX0D: null */
#define screen_epaper_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x9000), 0x0D, (uint32_t) (value), sizeof(uint8_t))
typedef enum actor_mothership_properties_indecies {
  ACTOR_MOTHERSHIP_TIMER_INDEX = 0x01,
  ACTOR_MOTHERSHIP_STORAGE_INDEX = 0x02,
  ACTOR_MOTHERSHIP_MCU_INDEX = 0x03,
  ACTOR_MOTHERSHIP_CANOPEN_INDEX = 0x04,
  ACTOR_MOTHERSHIP_PHASE = 0x05
} actor_mothership_properties_indecies_t;

/* 0x30XX01: Index of a timer used for generic medium-precision scheduling (1us) */
#define actor_mothership_get_timer_index(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x3000), 0x01))
/* 0x30XX02: null */
#define actor_mothership_get_storage_index(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x3000), 0x02))
/* 0x30XX03: Main MCU device index */
#define actor_mothership_get_mcu_index(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x3000), 0x03))
/* 0x30XX04: Main CANopen device */
#define actor_mothership_get_canopen_index(actor) *((uint32_t *) actor_property_pointer_get(actor_of_type(actor, 0x3000), 0x04))
/* 0x30XX05: null */
#define actor_mothership_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x3000), 0x05))
/* 0x30XX05: null */
#define actor_mothership_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x3000), 0x05, (uint32_t) (value), sizeof(uint8_t))
typedef enum screen_ili9341_properties_indecies {
  SCREEN_ILI9341_WIDTH = 0x01,
  SCREEN_ILI9341_HEIGHT = 0x02,
  SCREEN_ILI9341_PHASE = 0x03,
  SCREEN_ILI9341_ORIENTATION = 0x04,
  SCREEN_ILI9341_INVERT_COLORS = 0x05,
  SCREEN_ILI9341_BACKLIGHT = 0x06
} screen_ili9341_properties_indecies_t;

/* 0x91XX01: null */
#define screen_ili9341_get_width(actor) *((int16_t *) actor_property_pointer_get(actor_of_type(actor, 0x9100), 0x01))
/* 0x91XX02: null */
#define screen_ili9341_get_height(actor) *((uint16_t *) actor_property_pointer_get(actor_of_type(actor, 0x9100), 0x02))
/* 0x91XX03: null */
#define screen_ili9341_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9100), 0x03))
/* 0x91XX03: null */
#define screen_ili9341_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x9100), 0x03, (uint32_t) (value), sizeof(uint8_t))
/* 0x91XX04: null */
#define screen_ili9341_get_orientation(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9100), 0x04))
/* 0x91XX04: null */
#define screen_ili9341_set_orientation(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x9100), 0x04, (uint32_t) (value), sizeof(uint8_t))
/* 0x91XX05: null */
#define screen_ili9341_get_invert_colors(actor) *((bool_t *) actor_property_pointer_get(actor_of_type(actor, 0x9100), 0x05))
/* 0x91XX05: null */
#define screen_ili9341_set_invert_colors(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x9100), 0x05, (uint32_t) (value), sizeof(bool_t))
/* 0x91XX06: null */
#define screen_ili9341_get_backlight(actor) *((bool_t *) actor_property_pointer_get(actor_of_type(actor, 0x9100), 0x06))
/* 0x91XX06: null */
#define screen_ili9341_set_backlight(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x9100), 0x06, (uint32_t) (value), sizeof(bool_t))
typedef enum indicator_led_properties_indecies {
  INDICATOR_LED_PORT = 0x01,
  INDICATOR_LED_PIN = 0x02,
  INDICATOR_LED_PHASE = 0x03,
  INDICATOR_LED_DUTY_CYCLE = 0x04
} indicator_led_properties_indecies_t;

/* 0x98XX01: null */
#define indicator_led_get_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9800), 0x01))
/* 0x98XX02: null */
#define indicator_led_get_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9800), 0x02))
/* 0x98XX03: Current state of a device (DEVICE_PHASE) */
#define indicator_led_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9800), 0x03))
/* 0x98XX03: Current state of a device (DEVICE_PHASE) */
#define indicator_led_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x9800), 0x03, (uint32_t) (value), sizeof(uint8_t))
/* 0x98XX04: Brightness of LED between 0 and 255 */
#define indicator_led_get_duty_cycle(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9800), 0x04))
/* 0x98XX04: Brightness of LED between 0 and 255 */
#define indicator_led_set_duty_cycle(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x9800), 0x04, (uint32_t) (value), sizeof(uint8_t))
typedef enum signal_beeper_properties_indecies {
  SIGNAL_BEEPER_PORT = 0x01,
  SIGNAL_BEEPER_PIN = 0x02,
  SIGNAL_BEEPER_PHASE = 0x03,
  SIGNAL_BEEPER_DUTY_CYCLE = 0x04,
  SIGNAL_BEEPER_TEST_Z = 0x05
} signal_beeper_properties_indecies_t;

/* 0x99XX01: null */
#define signal_beeper_get_port(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9900), 0x01))
/* 0x99XX02: null */
#define signal_beeper_get_pin(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9900), 0x02))
/* 0x99XX03: Current state of a device (DEVICE_PHASE) */
#define signal_beeper_get_phase(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9900), 0x03))
/* 0x99XX03: Current state of a device (DEVICE_PHASE) */
#define signal_beeper_set_phase(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x9900), 0x03, (uint32_t) (value), sizeof(uint8_t))
/* 0x99XX04: null */
#define signal_beeper_get_duty_cycle(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9900), 0x04))
/* 0x99XX04: null */
#define signal_beeper_set_duty_cycle(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x9900), 0x04, (uint32_t) (value), sizeof(uint8_t))
/* 0x99XX05: null */
#define signal_beeper_get_test_z(actor) *((uint8_t *) actor_property_pointer_get(actor_of_type(actor, 0x9900), 0x05))
/* 0x99XX05: null */
#define signal_beeper_set_test_z(actor, value) actor_property_numeric_set(actor_of_type(actor, 0x9900), 0x05, (uint32_t) (value), sizeof(uint8_t))
