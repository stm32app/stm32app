#include <actor/stubs.h>
#include <actor/types.h>
#include <actor/accessors.h>

/* This file is autogenerated of CANopen profile, dont edit it manually */

typedef enum device_circuit_properties_indecies {
  DEVICE_CIRCUIT_PORT = 0x01,
  DEVICE_CIRCUIT_PIN = 0x02,
  DEVICE_CIRCUIT_LIMIT_CURRENT = 0x03,
  DEVICE_CIRCUIT_LIMIT_VOLTAGE = 0x04,
  DEVICE_CIRCUIT_PSU_INDEX = 0x05,
  DEVICE_CIRCUIT_SENSOR_INDEX = 0x06,
  DEVICE_CIRCUIT_PHASE = 0x07,
  DEVICE_CIRCUIT_DUTY_CYCLE = 0x08,
  DEVICE_CIRCUIT_CURRENT = 0x09,
  DEVICE_CIRCUIT_VOLTAGE = 0x0A,
  DEVICE_CIRCUIT_CONSUMERS = 0x0B
} device_circuit_properties_indecies_t;

static inline uint8_t device_circuit_get_port(device_circuit_t *circuit) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(circuit), DEVICE_CIRCUIT_PORT));
}
static inline uint8_t device_circuit_get_pin(device_circuit_t *circuit) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(circuit), DEVICE_CIRCUIT_PIN));
}
static inline uint16_t device_circuit_get_limit_current(device_circuit_t *circuit) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(circuit), DEVICE_CIRCUIT_LIMIT_CURRENT));
}
static inline uint16_t device_circuit_get_limit_voltage(device_circuit_t *circuit) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(circuit), DEVICE_CIRCUIT_LIMIT_VOLTAGE));
}
static inline uint16_t device_circuit_get_psu_index(device_circuit_t *circuit) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(circuit), DEVICE_CIRCUIT_PSU_INDEX));
}
static inline uint16_t device_circuit_get_sensor_index(device_circuit_t *circuit) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(circuit), DEVICE_CIRCUIT_SENSOR_INDEX));
}
/* 0x40XX07: Hall sensor measures current and allows circuit to become a circuit breaker */
static inline void device_circuit_set_phase(device_circuit_t *circuit, uint8_t value) { 
    actor_set_property_numeric(actor_box(circuit), DEVICE_CIRCUIT_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t device_circuit_get_phase(device_circuit_t *circuit) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(circuit), DEVICE_CIRCUIT_PHASE));
}
/* 0x40XX08: Phase x */
static inline void device_circuit_set_duty_cycle(device_circuit_t *circuit, uint16_t value) { 
    actor_set_property_numeric(actor_box(circuit), DEVICE_CIRCUIT_DUTY_CYCLE, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t device_circuit_get_duty_cycle(device_circuit_t *circuit) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(circuit), DEVICE_CIRCUIT_DUTY_CYCLE));
}
/* 0x40XX09: null */
static inline void device_circuit_set_current(device_circuit_t *circuit, uint16_t value) { 
    actor_set_property_numeric(actor_box(circuit), DEVICE_CIRCUIT_CURRENT, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t device_circuit_get_current(device_circuit_t *circuit) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(circuit), DEVICE_CIRCUIT_CURRENT));
}
/* 0x40XX0A: Current  x */
static inline void device_circuit_set_voltage(device_circuit_t *circuit, uint16_t value) { 
    actor_set_property_numeric(actor_box(circuit), DEVICE_CIRCUIT_VOLTAGE, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t device_circuit_get_voltage(device_circuit_t *circuit) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(circuit), DEVICE_CIRCUIT_VOLTAGE));
}
/* 0x40XX0B: null */
static inline void device_circuit_set_consumers(device_circuit_t *circuit, uint8_t value) { 
    actor_set_property_numeric(actor_box(circuit), DEVICE_CIRCUIT_CONSUMERS, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t device_circuit_get_consumers(device_circuit_t *circuit) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(circuit), DEVICE_CIRCUIT_CONSUMERS));
}
typedef enum module_mcu_properties_indecies {
  MODULE_MCU_FAMILY = 0x01,
  MODULE_MCU_BOARD_TYPE = 0x02,
  MODULE_MCU_STORAGE_INDEX = 0x03,
  MODULE_MCU_PHASE = 0x04,
  MODULE_MCU_CPU_TEMPERATURE = 0x05,
  MODULE_MCU_STARTUP_TIME = 0x06
} module_mcu_properties_indecies_t;

static inline char *module_mcu_get_family(module_mcu_t *mcu) {
    return (char *) actor_get_property_pointer(actor_box(mcu), MODULE_MCU_FAMILY);
}
static inline char *module_mcu_get_board_type(module_mcu_t *mcu) {
    return (char *) actor_get_property_pointer(actor_box(mcu), MODULE_MCU_BOARD_TYPE);
}
static inline uint32_t module_mcu_get_storage_index(module_mcu_t *mcu) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(mcu), MODULE_MCU_STORAGE_INDEX));
}
/* 0x60XX04: null */
static inline void module_mcu_set_phase(module_mcu_t *mcu, uint8_t value) { 
    actor_set_property_numeric(actor_box(mcu), MODULE_MCU_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t module_mcu_get_phase(module_mcu_t *mcu) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(mcu), MODULE_MCU_PHASE));
}
/* 0x60XX05: null */
static inline void module_mcu_set_cpu_temperature(module_mcu_t *mcu, int16_t value) { 
    actor_set_property_numeric(actor_box(mcu), MODULE_MCU_CPU_TEMPERATURE, (uint32_t)(value), sizeof(int16_t));
}
static inline int16_t module_mcu_get_cpu_temperature(module_mcu_t *mcu) {
    return *((int16_t *) actor_get_property_pointer(actor_box(mcu), MODULE_MCU_CPU_TEMPERATURE));
}
/* 0x60XX06: In milliseconds */
static inline void module_mcu_set_startup_time(module_mcu_t *mcu, uint32_t value) { 
    actor_set_property_numeric(actor_box(mcu), MODULE_MCU_STARTUP_TIME, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t module_mcu_get_startup_time(module_mcu_t *mcu) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(mcu), MODULE_MCU_STARTUP_TIME));
}
typedef enum actor_canopen_properties_indecies {
  ACTOR_CANOPEN_CAN_INDEX = 0x01,
  ACTOR_CANOPEN_CAN_FIFO_INDEX = 0x02,
  ACTOR_CANOPEN_GREEN_LED_INDEX = 0x03,
  ACTOR_CANOPEN_RED_LED_INDEX = 0x04,
  ACTOR_CANOPEN_FIRST_HB_TIME = 0x05,
  ACTOR_CANOPEN_SDO_SERVER_TIMEOUT = 0x06,
  ACTOR_CANOPEN_SDO_CLIENT_TIMEOUT = 0x07,
  ACTOR_CANOPEN_PHASE = 0x08,
  ACTOR_CANOPEN_NODE_ID = 0x09,
  ACTOR_CANOPEN_BITRATE = 0x0A
} actor_canopen_properties_indecies_t;

static inline uint16_t actor_canopen_get_can_index(actor_canopen_t *canopen) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(canopen), ACTOR_CANOPEN_CAN_INDEX));
}
static inline uint8_t actor_canopen_get_can_fifo_index(actor_canopen_t *canopen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(canopen), ACTOR_CANOPEN_CAN_FIFO_INDEX));
}
static inline uint16_t actor_canopen_get_green_led_index(actor_canopen_t *canopen) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(canopen), ACTOR_CANOPEN_GREEN_LED_INDEX));
}
static inline uint16_t actor_canopen_get_red_led_index(actor_canopen_t *canopen) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(canopen), ACTOR_CANOPEN_RED_LED_INDEX));
}
static inline uint16_t actor_canopen_get_first_hb_time(actor_canopen_t *canopen) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(canopen), ACTOR_CANOPEN_FIRST_HB_TIME));
}
static inline uint16_t actor_canopen_get_sdo_server_timeout(actor_canopen_t *canopen) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(canopen), ACTOR_CANOPEN_SDO_SERVER_TIMEOUT));
}
static inline uint16_t actor_canopen_get_sdo_client_timeout(actor_canopen_t *canopen) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(canopen), ACTOR_CANOPEN_SDO_CLIENT_TIMEOUT));
}
/* 0x60XX08: null */
static inline void actor_canopen_set_phase(actor_canopen_t *canopen, uint8_t value) { 
    actor_set_property_numeric(actor_box(canopen), ACTOR_CANOPEN_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t actor_canopen_get_phase(actor_canopen_t *canopen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(canopen), ACTOR_CANOPEN_PHASE));
}
/* 0x60XX09: Node ID */
static inline void actor_canopen_set_node_id(actor_canopen_t *canopen, uint8_t value) { 
    actor_set_property_numeric(actor_box(canopen), ACTOR_CANOPEN_NODE_ID, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t actor_canopen_get_node_id(actor_canopen_t *canopen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(canopen), ACTOR_CANOPEN_NODE_ID));
}
/* 0x60XX0A: Negotiated bitrate */
static inline void actor_canopen_set_bitrate(actor_canopen_t *canopen, uint16_t value) { 
    actor_set_property_numeric(actor_box(canopen), ACTOR_CANOPEN_BITRATE, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t actor_canopen_get_bitrate(actor_canopen_t *canopen) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(canopen), ACTOR_CANOPEN_BITRATE));
}
typedef enum actor_database_properties_indecies {
  ACTOR_DATABASE_STORAGE_INDEX = 0x01,
  ACTOR_DATABASE_JOURNAL_BUFFER_SIZE = 0x02,
  ACTOR_DATABASE_PATH = 0x03,
  ACTOR_DATABASE_PHASE = 0x04
} actor_database_properties_indecies_t;

static inline int16_t actor_database_get_storage_index(actor_database_t *database) {
    return *((int16_t *) actor_get_property_pointer(actor_box(database), ACTOR_DATABASE_STORAGE_INDEX));
}
static inline uint32_t actor_database_get_journal_buffer_size(actor_database_t *database) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(database), ACTOR_DATABASE_JOURNAL_BUFFER_SIZE));
}
static inline char *actor_database_get_path(actor_database_t *database) {
    return (char *) actor_get_property_pointer(actor_box(database), ACTOR_DATABASE_PATH);
}
/* 0x60XX04: null */
static inline void actor_database_set_phase(actor_database_t *database, uint8_t value) { 
    actor_set_property_numeric(actor_box(database), ACTOR_DATABASE_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t actor_database_get_phase(actor_database_t *database) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(database), ACTOR_DATABASE_PHASE));
}
typedef enum module_timer_properties_indecies {
  MODULE_TIMER_PRESCALER = 0x01,
  MODULE_TIMER_INITIAL_SUBSCRIPTIONS_COUNT = 0x02,
  MODULE_TIMER_PERIOD = 0x03,
  MODULE_TIMER_FREQUENCY = 0x04,
  MODULE_TIMER_PHASE = 0x05
} module_timer_properties_indecies_t;

static inline uint8_t module_timer_get_prescaler(module_timer_t *timer) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(timer), MODULE_TIMER_PRESCALER));
}
static inline uint8_t module_timer_get_initial_subscriptions_count(module_timer_t *timer) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(timer), MODULE_TIMER_INITIAL_SUBSCRIPTIONS_COUNT));
}
static inline uint32_t module_timer_get_period(module_timer_t *timer) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(timer), MODULE_TIMER_PERIOD));
}
static inline uint32_t module_timer_get_frequency(module_timer_t *timer) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(timer), MODULE_TIMER_FREQUENCY));
}
/* 0x61XX05: null */
static inline void module_timer_set_phase(module_timer_t *timer, uint8_t value) { 
    actor_set_property_numeric(actor_box(timer), MODULE_TIMER_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t module_timer_get_phase(module_timer_t *timer) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(timer), MODULE_TIMER_PHASE));
}
typedef enum transport_can_properties_indecies {
  TRANSPORT_CAN_TX_PORT = 0x01,
  TRANSPORT_CAN_TX_PIN = 0x02,
  TRANSPORT_CAN_RX_PORT = 0x03,
  TRANSPORT_CAN_RX_PIN = 0x04,
  TRANSPORT_CAN_BITRATE = 0x05,
  TRANSPORT_CAN_BRP = 0x06,
  TRANSPORT_CAN_SJW = 0x07,
  TRANSPORT_CAN_PROP = 0x08,
  TRANSPORT_CAN_PH_SEG1 = 0x09,
  TRANSPORT_CAN_PH_SEG2 = 0x0A,
  TRANSPORT_CAN_PHASE = 0x0B
} transport_can_properties_indecies_t;

static inline uint8_t transport_can_get_tx_port(transport_can_t *can) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(can), TRANSPORT_CAN_TX_PORT));
}
static inline uint8_t transport_can_get_tx_pin(transport_can_t *can) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(can), TRANSPORT_CAN_TX_PIN));
}
static inline uint8_t transport_can_get_rx_port(transport_can_t *can) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(can), TRANSPORT_CAN_RX_PORT));
}
static inline uint8_t transport_can_get_rx_pin(transport_can_t *can) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(can), TRANSPORT_CAN_RX_PIN));
}
static inline int16_t transport_can_get_bitrate(transport_can_t *can) {
    return *((int16_t *) actor_get_property_pointer(actor_box(can), TRANSPORT_CAN_BITRATE));
}
static inline uint16_t transport_can_get_brp(transport_can_t *can) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(can), TRANSPORT_CAN_BRP));
}
static inline uint8_t transport_can_get_sjw(transport_can_t *can) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(can), TRANSPORT_CAN_SJW));
}
static inline uint8_t transport_can_get_prop(transport_can_t *can) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(can), TRANSPORT_CAN_PROP));
}
static inline uint8_t transport_can_get_ph_seg1(transport_can_t *can) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(can), TRANSPORT_CAN_PH_SEG1));
}
static inline uint8_t transport_can_get_ph_seg2(transport_can_t *can) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(can), TRANSPORT_CAN_PH_SEG2));
}
/* 0x62XX0B: null */
static inline void transport_can_set_phase(transport_can_t *can, uint8_t value) { 
    actor_set_property_numeric(actor_box(can), TRANSPORT_CAN_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_can_get_phase(transport_can_t *can) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(can), TRANSPORT_CAN_PHASE));
}
typedef enum transport_spi_properties_indecies {
  TRANSPORT_SPI_IS_SLAVE = 0x01,
  TRANSPORT_SPI_SOFTWARE_SS_CONTROL = 0x02,
  TRANSPORT_SPI_MODE = 0x03,
  TRANSPORT_SPI_DMA_RX_UNIT = 0x04,
  TRANSPORT_SPI_DMA_RX_STREAM = 0x05,
  TRANSPORT_SPI_DMA_RX_CHANNEL = 0x06,
  TRANSPORT_SPI_DMA_RX_IDLE_TIMEOUT = 0x07,
  TRANSPORT_SPI_DMA_RX_CIRCULAR_BUFFER_SIZE = 0x08,
  TRANSPORT_SPI_RX_POOL_MAX_SIZE = 0x09,
  TRANSPORT_SPI_RX_POOL_INITIAL_SIZE = 0x0A,
  TRANSPORT_SPI_RX_POOL_BLOCK_SIZE = 0x0B,
  TRANSPORT_SPI_DMA_TX_UNIT = 0x0C,
  TRANSPORT_SPI_DMA_TX_STREAM = 0x0D,
  TRANSPORT_SPI_DMA_TX_CHANNEL = 0x0E,
  TRANSPORT_SPI_AF_INDEX = 0x0F,
  TRANSPORT_SPI_SS_PORT = 0x10,
  TRANSPORT_SPI_SS_PIN = 0x11,
  TRANSPORT_SPI_SCK_PORT = 0x12,
  TRANSPORT_SPI_SCK_PIN = 0x13,
  TRANSPORT_SPI_MISO_PORT = 0x14,
  TRANSPORT_SPI_MISO_PIN = 0x15,
  TRANSPORT_SPI_MOSI_PORT = 0x16,
  TRANSPORT_SPI_MOSI_PIN = 0x17,
  TRANSPORT_SPI_PHASE = 0x18
} transport_spi_properties_indecies_t;

static inline uint8_t transport_spi_get_is_slave(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_IS_SLAVE));
}
static inline uint8_t transport_spi_get_software_ss_control(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_SOFTWARE_SS_CONTROL));
}
static inline uint8_t transport_spi_get_mode(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_MODE));
}
static inline uint8_t transport_spi_get_dma_rx_unit(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_DMA_RX_UNIT));
}
static inline uint8_t transport_spi_get_dma_rx_stream(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_DMA_RX_STREAM));
}
static inline uint8_t transport_spi_get_dma_rx_channel(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_DMA_RX_CHANNEL));
}
static inline uint32_t transport_spi_get_dma_rx_idle_timeout(transport_spi_t *spi) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_DMA_RX_IDLE_TIMEOUT));
}
static inline uint16_t transport_spi_get_dma_rx_circular_buffer_size(transport_spi_t *spi) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_DMA_RX_CIRCULAR_BUFFER_SIZE));
}
static inline uint16_t transport_spi_get_rx_pool_max_size(transport_spi_t *spi) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_RX_POOL_MAX_SIZE));
}
static inline uint16_t transport_spi_get_rx_pool_initial_size(transport_spi_t *spi) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_RX_POOL_INITIAL_SIZE));
}
static inline uint16_t transport_spi_get_rx_pool_block_size(transport_spi_t *spi) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_RX_POOL_BLOCK_SIZE));
}
static inline uint8_t transport_spi_get_dma_tx_unit(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_DMA_TX_UNIT));
}
static inline uint8_t transport_spi_get_dma_tx_stream(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_DMA_TX_STREAM));
}
static inline uint8_t transport_spi_get_dma_tx_channel(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_DMA_TX_CHANNEL));
}
static inline uint8_t transport_spi_get_af_index(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_AF_INDEX));
}
static inline uint8_t transport_spi_get_ss_port(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_SS_PORT));
}
static inline uint8_t transport_spi_get_ss_pin(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_SS_PIN));
}
static inline uint8_t transport_spi_get_sck_port(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_SCK_PORT));
}
static inline uint8_t transport_spi_get_sck_pin(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_SCK_PIN));
}
static inline uint8_t transport_spi_get_miso_port(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_MISO_PORT));
}
static inline uint8_t transport_spi_get_miso_pin(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_MISO_PIN));
}
static inline uint8_t transport_spi_get_mosi_port(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_MOSI_PORT));
}
static inline uint8_t transport_spi_get_mosi_pin(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_MOSI_PIN));
}
/* 0x62XX18: null */
static inline void transport_spi_set_phase(transport_spi_t *spi, uint8_t value) { 
    actor_set_property_numeric(actor_box(spi), TRANSPORT_SPI_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_spi_get_phase(transport_spi_t *spi) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(spi), TRANSPORT_SPI_PHASE));
}
typedef enum transport_usart_properties_indecies {
  TRANSPORT_USART_DMA_RX_UNIT = 0x01,
  TRANSPORT_USART_DMA_RX_STREAM = 0x02,
  TRANSPORT_USART_DMA_RX_CHANNEL = 0x03,
  TRANSPORT_USART_DMA_RX_CIRCULAR_BUFFER_SIZE = 0x04,
  TRANSPORT_USART_DMA_TX_UNIT = 0x05,
  TRANSPORT_USART_DMA_TX_STREAM = 0x06,
  TRANSPORT_USART_DMA_TX_CHANNEL = 0x07,
  TRANSPORT_USART_BAUDRATE = 0x08,
  TRANSPORT_USART_DATABITS = 0x09,
  TRANSPORT_USART_PHASE = 0x0A
} transport_usart_properties_indecies_t;

static inline uint8_t transport_usart_get_dma_rx_unit(transport_usart_t *usart) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(usart), TRANSPORT_USART_DMA_RX_UNIT));
}
static inline uint8_t transport_usart_get_dma_rx_stream(transport_usart_t *usart) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(usart), TRANSPORT_USART_DMA_RX_STREAM));
}
static inline uint8_t transport_usart_get_dma_rx_channel(transport_usart_t *usart) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(usart), TRANSPORT_USART_DMA_RX_CHANNEL));
}
static inline uint8_t transport_usart_get_dma_rx_circular_buffer_size(transport_usart_t *usart) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(usart), TRANSPORT_USART_DMA_RX_CIRCULAR_BUFFER_SIZE));
}
static inline uint8_t transport_usart_get_dma_tx_unit(transport_usart_t *usart) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(usart), TRANSPORT_USART_DMA_TX_UNIT));
}
static inline uint8_t transport_usart_get_dma_tx_stream(transport_usart_t *usart) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(usart), TRANSPORT_USART_DMA_TX_STREAM));
}
static inline uint8_t transport_usart_get_dma_tx_channel(transport_usart_t *usart) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(usart), TRANSPORT_USART_DMA_TX_CHANNEL));
}
static inline uint32_t transport_usart_get_baudrate(transport_usart_t *usart) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(usart), TRANSPORT_USART_BAUDRATE));
}
static inline uint8_t transport_usart_get_databits(transport_usart_t *usart) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(usart), TRANSPORT_USART_DATABITS));
}
/* 0x62XX0A: null */
static inline void transport_usart_set_phase(transport_usart_t *usart, uint8_t value) { 
    actor_set_property_numeric(actor_box(usart), TRANSPORT_USART_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_usart_get_phase(transport_usart_t *usart) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(usart), TRANSPORT_USART_PHASE));
}
typedef enum transport_i2c_properties_indecies {
  TRANSPORT_I2C_DMA_RX_UNIT = 0x01,
  TRANSPORT_I2C_DMA_RX_STREAM = 0x02,
  TRANSPORT_I2C_DMA_RX_CHANNEL = 0x03,
  TRANSPORT_I2C_DMA_RX_CIRCULAR_BUFFER_SIZE = 0x04,
  TRANSPORT_I2C_RX_POOL_MAX_SIZE = 0x05,
  TRANSPORT_I2C_RX_POOL_INITIAL_SIZE = 0x06,
  TRANSPORT_I2C_RX_POOL_BLOCK_SIZE = 0x07,
  TRANSPORT_I2C_DMA_TX_UNIT = 0x08,
  TRANSPORT_I2C_DMA_TX_STREAM = 0x09,
  TRANSPORT_I2C_DMA_TX_CHANNEL = 0x0A,
  TRANSPORT_I2C_AF = 0x0B,
  TRANSPORT_I2C_SMBA_PIN = 0x0C,
  TRANSPORT_I2C_SMBA_PORT = 0x0D,
  TRANSPORT_I2C_SDA_PORT = 0x0E,
  TRANSPORT_I2C_SDA_PIN = 0x0F,
  TRANSPORT_I2C_SCL_PORT = 0x10,
  TRANSPORT_I2C_SCL_PIN = 0x11,
  TRANSPORT_I2C_FREQUENCY = 0x12,
  TRANSPORT_I2C_DATABITS = 0x13,
  TRANSPORT_I2C_PHASE = 0x14,
  TRANSPORT_I2C_SLAVE_ADDRESS = 0x15
} transport_i2c_properties_indecies_t;

static inline uint8_t transport_i2c_get_dma_rx_unit(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_DMA_RX_UNIT));
}
static inline uint8_t transport_i2c_get_dma_rx_stream(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_DMA_RX_STREAM));
}
static inline uint8_t transport_i2c_get_dma_rx_channel(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_DMA_RX_CHANNEL));
}
static inline uint8_t transport_i2c_get_dma_rx_circular_buffer_size(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_DMA_RX_CIRCULAR_BUFFER_SIZE));
}
static inline uint16_t transport_i2c_get_rx_pool_max_size(transport_i2c_t *i2c) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_RX_POOL_MAX_SIZE));
}
static inline uint16_t transport_i2c_get_rx_pool_initial_size(transport_i2c_t *i2c) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_RX_POOL_INITIAL_SIZE));
}
static inline uint16_t transport_i2c_get_rx_pool_block_size(transport_i2c_t *i2c) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_RX_POOL_BLOCK_SIZE));
}
static inline uint8_t transport_i2c_get_dma_tx_unit(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_DMA_TX_UNIT));
}
static inline uint8_t transport_i2c_get_dma_tx_stream(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_DMA_TX_STREAM));
}
static inline uint8_t transport_i2c_get_dma_tx_channel(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_DMA_TX_CHANNEL));
}
static inline uint8_t transport_i2c_get_af(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_AF));
}
static inline uint8_t transport_i2c_get_smba_pin(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_SMBA_PIN));
}
static inline uint8_t transport_i2c_get_smba_port(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_SMBA_PORT));
}
static inline uint8_t transport_i2c_get_sda_port(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_SDA_PORT));
}
static inline uint8_t transport_i2c_get_sda_pin(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_SDA_PIN));
}
static inline uint8_t transport_i2c_get_scl_port(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_SCL_PORT));
}
static inline uint8_t transport_i2c_get_scl_pin(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_SCL_PIN));
}
static inline int8_t transport_i2c_get_frequency(transport_i2c_t *i2c) {
    return *((int8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_FREQUENCY));
}
static inline uint8_t transport_i2c_get_databits(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_DATABITS));
}
/* 0x62XX14: null */
static inline void transport_i2c_set_phase(transport_i2c_t *i2c, uint8_t value) { 
    actor_set_property_numeric(actor_box(i2c), TRANSPORT_I2C_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_i2c_get_phase(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_PHASE));
}
/* 0x62XX15: null */
static inline void transport_i2c_set_slave_address(transport_i2c_t *i2c, uint8_t value) { 
    actor_set_property_numeric(actor_box(i2c), TRANSPORT_I2C_SLAVE_ADDRESS, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_i2c_get_slave_address(transport_i2c_t *i2c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(i2c), TRANSPORT_I2C_SLAVE_ADDRESS));
}
typedef enum transport_modbus_properties_indecies {
  TRANSPORT_MODBUS_USART_INDEX = 0x01,
  TRANSPORT_MODBUS_RTS_PORT = 0x02,
  TRANSPORT_MODBUS_RTS_PIN = 0x03,
  TRANSPORT_MODBUS_SLAVE_ADDRESS = 0x04,
  TRANSPORT_MODBUS_TIMEOUT = 0x05,
  TRANSPORT_MODBUS_PHASE = 0x06
} transport_modbus_properties_indecies_t;

static inline uint16_t transport_modbus_get_usart_index(transport_modbus_t *modbus) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(modbus), TRANSPORT_MODBUS_USART_INDEX));
}
static inline uint8_t transport_modbus_get_rts_port(transport_modbus_t *modbus) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(modbus), TRANSPORT_MODBUS_RTS_PORT));
}
static inline uint8_t transport_modbus_get_rts_pin(transport_modbus_t *modbus) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(modbus), TRANSPORT_MODBUS_RTS_PIN));
}
static inline uint8_t transport_modbus_get_slave_address(transport_modbus_t *modbus) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(modbus), TRANSPORT_MODBUS_SLAVE_ADDRESS));
}
static inline uint16_t transport_modbus_get_timeout(transport_modbus_t *modbus) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(modbus), TRANSPORT_MODBUS_TIMEOUT));
}
/* 0x62XX06: in us */
static inline void transport_modbus_set_phase(transport_modbus_t *modbus, uint8_t value) { 
    actor_set_property_numeric(actor_box(modbus), TRANSPORT_MODBUS_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_modbus_get_phase(transport_modbus_t *modbus) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(modbus), TRANSPORT_MODBUS_PHASE));
}
typedef enum transport_sdio_properties_indecies {
  TRANSPORT_SDIO_DMA_UNIT = 0x01,
  TRANSPORT_SDIO_DMA_STREAM = 0x02,
  TRANSPORT_SDIO_DMA_CHANNEL = 0x03,
  TRANSPORT_SDIO_AF = 0x04,
  TRANSPORT_SDIO_D0_PORT = 0x05,
  TRANSPORT_SDIO_D0_PIN = 0x06,
  TRANSPORT_SDIO_D1_PORT = 0x07,
  TRANSPORT_SDIO_D1_PIN = 0x08,
  TRANSPORT_SDIO_D2_PORT = 0x09,
  TRANSPORT_SDIO_D2_PIN = 0x0A,
  TRANSPORT_SDIO_D3_PORT = 0x0B,
  TRANSPORT_SDIO_D3_PIN = 0x0C,
  TRANSPORT_SDIO_CK_PORT = 0x0D,
  TRANSPORT_SDIO_CK_PIN = 0x0E,
  TRANSPORT_SDIO_CMD_PORT = 0x0F,
  TRANSPORT_SDIO_CMD_PIN = 0x10,
  TRANSPORT_SDIO_PHASE = 0x11
} transport_sdio_properties_indecies_t;

static inline uint8_t transport_sdio_get_dma_unit(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_DMA_UNIT));
}
static inline uint8_t transport_sdio_get_dma_stream(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_DMA_STREAM));
}
static inline uint8_t transport_sdio_get_dma_channel(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_DMA_CHANNEL));
}
static inline uint8_t transport_sdio_get_af(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_AF));
}
static inline uint8_t transport_sdio_get_d0_port(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_D0_PORT));
}
static inline uint8_t transport_sdio_get_d0_pin(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_D0_PIN));
}
static inline uint8_t transport_sdio_get_d1_port(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_D1_PORT));
}
static inline uint8_t transport_sdio_get_d1_pin(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_D1_PIN));
}
static inline uint8_t transport_sdio_get_d2_port(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_D2_PORT));
}
static inline uint8_t transport_sdio_get_d2_pin(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_D2_PIN));
}
static inline uint8_t transport_sdio_get_d3_port(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_D3_PORT));
}
static inline uint8_t transport_sdio_get_d3_pin(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_D3_PIN));
}
static inline uint8_t transport_sdio_get_ck_port(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_CK_PORT));
}
static inline uint8_t transport_sdio_get_ck_pin(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_CK_PIN));
}
static inline uint8_t transport_sdio_get_cmd_port(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_CMD_PORT));
}
static inline uint8_t transport_sdio_get_cmd_pin(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_CMD_PIN));
}
/* 0x62A011: null */
static inline void transport_sdio_set_phase(transport_sdio_t *sdio, uint8_t value) { 
    actor_set_property_numeric(actor_box(sdio), TRANSPORT_SDIO_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_sdio_get_phase(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdio), TRANSPORT_SDIO_PHASE));
}
typedef enum module_adc_properties_indecies {
  MODULE_ADC_INTERVAL = 0x01,
  MODULE_ADC_SAMPLE_COUNT_PER_CHANNEL = 0x02,
  MODULE_ADC_DMA_UNIT = 0x03,
  MODULE_ADC_DMA_STREAM = 0x04,
  MODULE_ADC_DMA_CHANNEL = 0x05,
  MODULE_ADC_PHASE = 0x06
} module_adc_properties_indecies_t;

static inline uint8_t module_adc_get_interval(module_adc_t *adc) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(adc), MODULE_ADC_INTERVAL));
}
static inline uint16_t module_adc_get_sample_count_per_channel(module_adc_t *adc) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(adc), MODULE_ADC_SAMPLE_COUNT_PER_CHANNEL));
}
static inline uint8_t module_adc_get_dma_unit(module_adc_t *adc) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(adc), MODULE_ADC_DMA_UNIT));
}
static inline uint8_t module_adc_get_dma_stream(module_adc_t *adc) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(adc), MODULE_ADC_DMA_STREAM));
}
static inline uint8_t module_adc_get_dma_channel(module_adc_t *adc) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(adc), MODULE_ADC_DMA_CHANNEL));
}
/* 0x63XX06: null */
static inline void module_adc_set_phase(module_adc_t *adc, uint8_t value) { 
    actor_set_property_numeric(actor_box(adc), MODULE_ADC_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t module_adc_get_phase(module_adc_t *adc) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(adc), MODULE_ADC_PHASE));
}
typedef enum storage_eeprom_properties_indecies {
  STORAGE_EEPROM_TRANSPORT_INDEX = 0x01,
  STORAGE_EEPROM_TRANSPORT_ADDRESS = 0x02,
  STORAGE_EEPROM_PAGE_SIZE = 0x03,
  STORAGE_EEPROM_SIZE = 0x04,
  STORAGE_EEPROM_PHASE = 0x05
} storage_eeprom_properties_indecies_t;

static inline uint16_t storage_eeprom_get_transport_index(storage_eeprom_t *eeprom) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(eeprom), STORAGE_EEPROM_TRANSPORT_INDEX));
}
static inline uint16_t storage_eeprom_get_transport_address(storage_eeprom_t *eeprom) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(eeprom), STORAGE_EEPROM_TRANSPORT_ADDRESS));
}
static inline uint16_t storage_eeprom_get_page_size(storage_eeprom_t *eeprom) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(eeprom), STORAGE_EEPROM_PAGE_SIZE));
}
static inline uint16_t storage_eeprom_get_size(storage_eeprom_t *eeprom) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(eeprom), STORAGE_EEPROM_SIZE));
}
/* 0x70XX05: null */
static inline void storage_eeprom_set_phase(storage_eeprom_t *eeprom, uint8_t value) { 
    actor_set_property_numeric(actor_box(eeprom), STORAGE_EEPROM_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_eeprom_get_phase(storage_eeprom_t *eeprom) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(eeprom), STORAGE_EEPROM_PHASE));
}
typedef enum storage_w25_properties_indecies {
  STORAGE_W25_SPI_INDEX = 0x01,
  STORAGE_W25_PAGE_SIZE = 0x02,
  STORAGE_W25_SIZE = 0x03,
  STORAGE_W25_PHASE = 0x04
} storage_w25_properties_indecies_t;

static inline uint16_t storage_w25_get_spi_index(storage_w25_t *w25) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(w25), STORAGE_W25_SPI_INDEX));
}
static inline uint16_t storage_w25_get_page_size(storage_w25_t *w25) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(w25), STORAGE_W25_PAGE_SIZE));
}
static inline uint16_t storage_w25_get_size(storage_w25_t *w25) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(w25), STORAGE_W25_SIZE));
}
/* 0x71XX04: null */
static inline void storage_w25_set_phase(storage_w25_t *w25, uint8_t value) { 
    actor_set_property_numeric(actor_box(w25), STORAGE_W25_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_w25_get_phase(storage_w25_t *w25) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(w25), STORAGE_W25_PHASE));
}
typedef enum storage_flash_properties_indecies {
  STORAGE_FLASH_START_ADDRESS = 0x01,
  STORAGE_FLASH_PAGE_SIZE = 0x02,
  STORAGE_FLASH_SIZE = 0x03,
  STORAGE_FLASH_PHASE = 0x04
} storage_flash_properties_indecies_t;

static inline uint32_t storage_flash_get_start_address(storage_flash_t *flash) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(flash), STORAGE_FLASH_START_ADDRESS));
}
static inline uint16_t storage_flash_get_page_size(storage_flash_t *flash) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(flash), STORAGE_FLASH_PAGE_SIZE));
}
static inline uint16_t storage_flash_get_size(storage_flash_t *flash) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(flash), STORAGE_FLASH_SIZE));
}
/* 0x72XX04: null */
static inline void storage_flash_set_phase(storage_flash_t *flash, uint8_t value) { 
    actor_set_property_numeric(actor_box(flash), STORAGE_FLASH_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_flash_get_phase(storage_flash_t *flash) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(flash), STORAGE_FLASH_PHASE));
}
typedef enum memory_sram_properties_indecies {
  MEMORY_SRAM_DISABLED = 0x01,
  MEMORY_SRAM_TRANSPORT_INDEX = 0x02,
  MEMORY_SRAM_TRANSPORT_ADDRESS = 0x03,
  MEMORY_SRAM_PAGE_SIZE = 0x04,
  MEMORY_SRAM_SIZE = 0x05,
  MEMORY_SRAM_PHASE = 0x06
} memory_sram_properties_indecies_t;

static inline int16_t memory_sram_get_disabled(memory_sram_t *sram) {
    return *((int16_t *) actor_get_property_pointer(actor_box(sram), MEMORY_SRAM_DISABLED));
}
static inline uint16_t memory_sram_get_transport_index(memory_sram_t *sram) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(sram), MEMORY_SRAM_TRANSPORT_INDEX));
}
static inline uint16_t memory_sram_get_transport_address(memory_sram_t *sram) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(sram), MEMORY_SRAM_TRANSPORT_ADDRESS));
}
static inline uint16_t memory_sram_get_page_size(memory_sram_t *sram) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(sram), MEMORY_SRAM_PAGE_SIZE));
}
static inline uint16_t memory_sram_get_size(memory_sram_t *sram) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(sram), MEMORY_SRAM_SIZE));
}
/* 0x73XX06: null */
static inline void memory_sram_set_phase(memory_sram_t *sram, uint8_t value) { 
    actor_set_property_numeric(actor_box(sram), MEMORY_SRAM_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t memory_sram_get_phase(memory_sram_t *sram) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sram), MEMORY_SRAM_PHASE));
}
typedef enum storage_at24c_properties_indecies {
  STORAGE_AT24C_I2C_INDEX = 0x01,
  STORAGE_AT24C_I2C_ADDRESS = 0x02,
  STORAGE_AT24C_START_ADDRESS = 0x03,
  STORAGE_AT24C_PAGE_SIZE = 0x04,
  STORAGE_AT24C_SIZE = 0x05,
  STORAGE_AT24C_PHASE = 0x06
} storage_at24c_properties_indecies_t;

static inline uint16_t storage_at24c_get_i2c_index(storage_at24c_t *at24c) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(at24c), STORAGE_AT24C_I2C_INDEX));
}
static inline uint8_t storage_at24c_get_i2c_address(storage_at24c_t *at24c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(at24c), STORAGE_AT24C_I2C_ADDRESS));
}
static inline uint16_t storage_at24c_get_start_address(storage_at24c_t *at24c) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(at24c), STORAGE_AT24C_START_ADDRESS));
}
static inline uint16_t storage_at24c_get_page_size(storage_at24c_t *at24c) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(at24c), STORAGE_AT24C_PAGE_SIZE));
}
static inline uint16_t storage_at24c_get_size(storage_at24c_t *at24c) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(at24c), STORAGE_AT24C_SIZE));
}
/* 0x74XX06: null */
static inline void storage_at24c_set_phase(storage_at24c_t *at24c, uint8_t value) { 
    actor_set_property_numeric(actor_box(at24c), STORAGE_AT24C_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_at24c_get_phase(storage_at24c_t *at24c) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(at24c), STORAGE_AT24C_PHASE));
}
typedef enum storage_sdcard_properties_indecies {
  STORAGE_SDCARD_SDIO_INDEX = 0x01,
  STORAGE_SDCARD_FS_READ_SIZE = 0x02,
  STORAGE_SDCARD_FS_PROGRAM_SIZE = 0x03,
  STORAGE_SDCARD_FS_BLOCK_CYCLES = 0x04,
  STORAGE_SDCARD_FS_CACHE_SIZE = 0x05,
  STORAGE_SDCARD_FS_LOOKAHEAD_SIZE = 0x06,
  STORAGE_SDCARD_FS_NAME_MAX_SIZE = 0x07,
  STORAGE_SDCARD_FS_FILE_MAX_SIZE = 0x08,
  STORAGE_SDCARD_FS_ATTR_MAX_SIZE = 0x09,
  STORAGE_SDCARD_FS_METADATA_MAX_SIZE = 0x0A,
  STORAGE_SDCARD_FS_VOLUME_NAME = 0x0B,
  STORAGE_SDCARD_PHASE = 0x0C,
  STORAGE_SDCARD_CAPACITY = 0x0D,
  STORAGE_SDCARD_BLOCK_SIZE = 0x0E,
  STORAGE_SDCARD_BLOCK_COUNT = 0x0F,
  STORAGE_SDCARD_MAX_BUS_CLOCK_FREQUENCY = 0x10,
  STORAGE_SDCARD_CSD_VERSION = 0x11,
  STORAGE_SDCARD_RELATIVE_CARD_ADDRESS = 0x12,
  STORAGE_SDCARD_MANUFACTURER_ID = 0x13,
  STORAGE_SDCARD_OEM_ID = 0x14,
  STORAGE_SDCARD_PRODUCT_NAME = 0x15,
  STORAGE_SDCARD_PRODUCT_REVISION = 0x16,
  STORAGE_SDCARD_SERIAL_NUMBER = 0x17,
  STORAGE_SDCARD_MANUFACTURING_DATE = 0x18,
  STORAGE_SDCARD_VERSION = 0x19,
  STORAGE_SDCARD_HIGH_CAPACITY = 0x1A
} storage_sdcard_properties_indecies_t;

static inline uint16_t storage_sdcard_get_sdio_index(storage_sdcard_t *sdcard) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_SDIO_INDEX));
}
static inline uint32_t storage_sdcard_get_fs_read_size(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_FS_READ_SIZE));
}
static inline uint32_t storage_sdcard_get_fs_program_size(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_FS_PROGRAM_SIZE));
}
static inline int32_t storage_sdcard_get_fs_block_cycles(storage_sdcard_t *sdcard) {
    return *((int32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_FS_BLOCK_CYCLES));
}
static inline uint16_t storage_sdcard_get_fs_cache_size(storage_sdcard_t *sdcard) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_FS_CACHE_SIZE));
}
static inline uint32_t storage_sdcard_get_fs_lookahead_size(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_FS_LOOKAHEAD_SIZE));
}
static inline uint32_t storage_sdcard_get_fs_name_max_size(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_FS_NAME_MAX_SIZE));
}
static inline uint32_t storage_sdcard_get_fs_file_max_size(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_FS_FILE_MAX_SIZE));
}
static inline uint32_t storage_sdcard_get_fs_attr_max_size(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_FS_ATTR_MAX_SIZE));
}
static inline uint32_t storage_sdcard_get_fs_metadata_max_size(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_FS_METADATA_MAX_SIZE));
}
static inline char *storage_sdcard_get_fs_volume_name(storage_sdcard_t *sdcard) {
    return (char *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_FS_VOLUME_NAME);
}
/* 0x75XX0C: null */
static inline void storage_sdcard_set_phase(storage_sdcard_t *sdcard, uint8_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_sdcard_get_phase(storage_sdcard_t *sdcard) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_PHASE));
}
/* 0x75XX0D: null */
static inline void storage_sdcard_set_capacity(storage_sdcard_t *sdcard, uint32_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_CAPACITY, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t storage_sdcard_get_capacity(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_CAPACITY));
}
/* 0x75XX0E: null */
static inline void storage_sdcard_set_block_size(storage_sdcard_t *sdcard, uint32_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_BLOCK_SIZE, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t storage_sdcard_get_block_size(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_BLOCK_SIZE));
}
/* 0x75XX0F: null */
static inline void storage_sdcard_set_block_count(storage_sdcard_t *sdcard, uint32_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_BLOCK_COUNT, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t storage_sdcard_get_block_count(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_BLOCK_COUNT));
}
/* 0x75XX10: null */
static inline void storage_sdcard_set_max_bus_clock_frequency(storage_sdcard_t *sdcard, uint32_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_MAX_BUS_CLOCK_FREQUENCY, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t storage_sdcard_get_max_bus_clock_frequency(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_MAX_BUS_CLOCK_FREQUENCY));
}
/* 0x75XX11: null */
static inline void storage_sdcard_set_csd_version(storage_sdcard_t *sdcard, uint8_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_CSD_VERSION, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_sdcard_get_csd_version(storage_sdcard_t *sdcard) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_CSD_VERSION));
}
/* 0x75XX12: null */
static inline void storage_sdcard_set_relative_card_address(storage_sdcard_t *sdcard, uint16_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_RELATIVE_CARD_ADDRESS, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t storage_sdcard_get_relative_card_address(storage_sdcard_t *sdcard) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_RELATIVE_CARD_ADDRESS));
}
/* 0x75XX13: null */
static inline void storage_sdcard_set_manufacturer_id(storage_sdcard_t *sdcard, uint8_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_MANUFACTURER_ID, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_sdcard_get_manufacturer_id(storage_sdcard_t *sdcard) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_MANUFACTURER_ID));
}
/* 0x75XX14: null */
static inline void storage_sdcard_set_oem_id(storage_sdcard_t *sdcard, uint16_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_OEM_ID, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t storage_sdcard_get_oem_id(storage_sdcard_t *sdcard) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_OEM_ID));
}
/* 0x75XX15: null */
static inline void storage_sdcard_set_product_name(storage_sdcard_t *sdcard, char *value, size_t size) {
    actor_set_property_string(actor_box(sdcard), STORAGE_SDCARD_PRODUCT_NAME, value, size);
}
static inline char *storage_sdcard_get_product_name(storage_sdcard_t *sdcard) {
    return (char *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_PRODUCT_NAME);
}
/* 0x75XX16: null */
static inline void storage_sdcard_set_product_revision(storage_sdcard_t *sdcard, uint8_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_PRODUCT_REVISION, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_sdcard_get_product_revision(storage_sdcard_t *sdcard) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_PRODUCT_REVISION));
}
/* 0x75XX17: null */
static inline void storage_sdcard_set_serial_number(storage_sdcard_t *sdcard, uint32_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_SERIAL_NUMBER, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t storage_sdcard_get_serial_number(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_SERIAL_NUMBER));
}
/* 0x75XX18: null */
static inline void storage_sdcard_set_manufacturing_date(storage_sdcard_t *sdcard, uint16_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_MANUFACTURING_DATE, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t storage_sdcard_get_manufacturing_date(storage_sdcard_t *sdcard) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_MANUFACTURING_DATE));
}
/* 0x75XX19: 2 or 1 */
static inline void storage_sdcard_set_version(storage_sdcard_t *sdcard, uint8_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_VERSION, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_sdcard_get_version(storage_sdcard_t *sdcard) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_VERSION));
}
/* 0x75XX1A: 1 for SDHC/SDXC card */
static inline void storage_sdcard_set_high_capacity(storage_sdcard_t *sdcard, bool_t value) { 
    actor_set_property_numeric(actor_box(sdcard), STORAGE_SDCARD_HIGH_CAPACITY, (uint32_t)(value), sizeof(bool_t));
}
static inline bool_t storage_sdcard_get_high_capacity(storage_sdcard_t *sdcard) {
    return *((bool_t *) actor_get_property_pointer(actor_box(sdcard), STORAGE_SDCARD_HIGH_CAPACITY));
}
typedef enum input_sensor_properties_indecies {
  INPUT_SENSOR_DISABLED = 0x01,
  INPUT_SENSOR_PORT = 0x02,
  INPUT_SENSOR_PIN = 0x03,
  INPUT_SENSOR_ADC_INDEX = 0x04,
  INPUT_SENSOR_ADC_CHANNEL = 0x05,
  INPUT_SENSOR_PHASE = 0x06
} input_sensor_properties_indecies_t;

static inline uint16_t input_sensor_get_disabled(input_sensor_t *sensor) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(sensor), INPUT_SENSOR_DISABLED));
}
static inline uint8_t input_sensor_get_port(input_sensor_t *sensor) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sensor), INPUT_SENSOR_PORT));
}
static inline uint8_t input_sensor_get_pin(input_sensor_t *sensor) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sensor), INPUT_SENSOR_PIN));
}
static inline uint16_t input_sensor_get_adc_index(input_sensor_t *sensor) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(sensor), INPUT_SENSOR_ADC_INDEX));
}
static inline uint8_t input_sensor_get_adc_channel(input_sensor_t *sensor) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sensor), INPUT_SENSOR_ADC_CHANNEL));
}
/* 0x80XX06: Current phase of a device (one of values in DEVICE_PHASE enum) */
static inline void input_sensor_set_phase(input_sensor_t *sensor, uint8_t value) { 
    actor_set_property_numeric(actor_box(sensor), INPUT_SENSOR_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t input_sensor_get_phase(input_sensor_t *sensor) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(sensor), INPUT_SENSOR_PHASE));
}
typedef enum control_touchscreen_properties_indecies {
  CONTROL_TOUCHSCREEN_SPI_INDEX = 0x01,
  CONTROL_TOUCHSCREEN_DC_PORT = 0x02,
  CONTROL_TOUCHSCREEN_DC_PIN = 0x03,
  CONTROL_TOUCHSCREEN_CS_PORT = 0x04,
  CONTROL_TOUCHSCREEN_CS_PIN = 0x05,
  CONTROL_TOUCHSCREEN_BUSY_PORT = 0x06,
  CONTROL_TOUCHSCREEN_BUSY_PIN = 0x07,
  CONTROL_TOUCHSCREEN_RESET_PORT = 0x08,
  CONTROL_TOUCHSCREEN_RESET_PIN = 0x09,
  CONTROL_TOUCHSCREEN_WIDTH = 0x0A,
  CONTROL_TOUCHSCREEN_HEIGHT = 0x0B,
  CONTROL_TOUCHSCREEN_MODE = 0x0C,
  CONTROL_TOUCHSCREEN_PHASE = 0x0D
} control_touchscreen_properties_indecies_t;

static inline uint16_t control_touchscreen_get_spi_index(control_touchscreen_t *touchscreen) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_SPI_INDEX));
}
static inline uint8_t control_touchscreen_get_dc_port(control_touchscreen_t *touchscreen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_DC_PORT));
}
static inline uint8_t control_touchscreen_get_dc_pin(control_touchscreen_t *touchscreen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_DC_PIN));
}
static inline uint8_t control_touchscreen_get_cs_port(control_touchscreen_t *touchscreen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_CS_PORT));
}
static inline uint8_t control_touchscreen_get_cs_pin(control_touchscreen_t *touchscreen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_CS_PIN));
}
static inline uint8_t control_touchscreen_get_busy_port(control_touchscreen_t *touchscreen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_BUSY_PORT));
}
static inline uint8_t control_touchscreen_get_busy_pin(control_touchscreen_t *touchscreen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_BUSY_PIN));
}
static inline uint8_t control_touchscreen_get_reset_port(control_touchscreen_t *touchscreen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_RESET_PORT));
}
static inline uint8_t control_touchscreen_get_reset_pin(control_touchscreen_t *touchscreen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_RESET_PIN));
}
static inline uint16_t control_touchscreen_get_width(control_touchscreen_t *touchscreen) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_WIDTH));
}
static inline uint16_t control_touchscreen_get_height(control_touchscreen_t *touchscreen) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_HEIGHT));
}
static inline uint16_t control_touchscreen_get_mode(control_touchscreen_t *touchscreen) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_MODE));
}
/* 0x81XX0D: null */
static inline void control_touchscreen_set_phase(control_touchscreen_t *touchscreen, uint8_t value) { 
    actor_set_property_numeric(actor_box(touchscreen), CONTROL_TOUCHSCREEN_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t control_touchscreen_get_phase(control_touchscreen_t *touchscreen) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(touchscreen), CONTROL_TOUCHSCREEN_PHASE));
}
typedef enum screen_epaper_properties_indecies {
  SCREEN_EPAPER_SPI_INDEX = 0x01,
  SCREEN_EPAPER_DC_PORT = 0x02,
  SCREEN_EPAPER_DC_PIN = 0x03,
  SCREEN_EPAPER_CS_PORT = 0x04,
  SCREEN_EPAPER_CS_PIN = 0x05,
  SCREEN_EPAPER_BUSY_PORT = 0x06,
  SCREEN_EPAPER_BUSY_PIN = 0x07,
  SCREEN_EPAPER_RESET_PORT = 0x08,
  SCREEN_EPAPER_RESET_PIN = 0x09,
  SCREEN_EPAPER_WIDTH = 0x0A,
  SCREEN_EPAPER_HEIGHT = 0x0B,
  SCREEN_EPAPER_MODE = 0x0C,
  SCREEN_EPAPER_PHASE = 0x0D
} screen_epaper_properties_indecies_t;

static inline uint16_t screen_epaper_get_spi_index(screen_epaper_t *epaper) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_SPI_INDEX));
}
static inline uint8_t screen_epaper_get_dc_port(screen_epaper_t *epaper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_DC_PORT));
}
static inline uint8_t screen_epaper_get_dc_pin(screen_epaper_t *epaper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_DC_PIN));
}
static inline uint8_t screen_epaper_get_cs_port(screen_epaper_t *epaper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_CS_PORT));
}
static inline uint8_t screen_epaper_get_cs_pin(screen_epaper_t *epaper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_CS_PIN));
}
static inline uint8_t screen_epaper_get_busy_port(screen_epaper_t *epaper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_BUSY_PORT));
}
static inline uint8_t screen_epaper_get_busy_pin(screen_epaper_t *epaper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_BUSY_PIN));
}
static inline uint8_t screen_epaper_get_reset_port(screen_epaper_t *epaper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_RESET_PORT));
}
static inline uint8_t screen_epaper_get_reset_pin(screen_epaper_t *epaper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_RESET_PIN));
}
static inline uint16_t screen_epaper_get_width(screen_epaper_t *epaper) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_WIDTH));
}
static inline uint16_t screen_epaper_get_height(screen_epaper_t *epaper) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_HEIGHT));
}
static inline uint16_t screen_epaper_get_mode(screen_epaper_t *epaper) {
    return *((uint16_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_MODE));
}
/* 0x90XX0D: null */
static inline void screen_epaper_set_phase(screen_epaper_t *epaper, uint8_t value) { 
    actor_set_property_numeric(actor_box(epaper), SCREEN_EPAPER_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t screen_epaper_get_phase(screen_epaper_t *epaper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(epaper), SCREEN_EPAPER_PHASE));
}
typedef enum actor_node_properties_indecies {
  ACTOR_NODE_TIMER_INDEX = 0x01,
  ACTOR_NODE_STORAGE_INDEX = 0x02,
  ACTOR_NODE_MCU_INDEX = 0x03,
  ACTOR_NODE_CANOPEN_INDEX = 0x04,
  ACTOR_NODE_PHASE = 0x05
} actor_node_properties_indecies_t;

static inline uint32_t actor_node_get_timer_index(actor_node_t *node) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(node), ACTOR_NODE_TIMER_INDEX));
}
static inline uint32_t actor_node_get_storage_index(actor_node_t *node) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(node), ACTOR_NODE_STORAGE_INDEX));
}
static inline uint32_t actor_node_get_mcu_index(actor_node_t *node) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(node), ACTOR_NODE_MCU_INDEX));
}
static inline uint32_t actor_node_get_canopen_index(actor_node_t *node) {
    return *((uint32_t *) actor_get_property_pointer(actor_box(node), ACTOR_NODE_CANOPEN_INDEX));
}
/* 0x30XX05: null */
static inline void actor_node_set_phase(actor_node_t *node, uint8_t value) { 
    actor_set_property_numeric(actor_box(node), ACTOR_NODE_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t actor_node_get_phase(actor_node_t *node) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(node), ACTOR_NODE_PHASE));
}
typedef enum indicator_led_properties_indecies {
  INDICATOR_LED_PORT = 0x01,
  INDICATOR_LED_PIN = 0x02,
  INDICATOR_LED_PHASE = 0x03,
  INDICATOR_LED_DUTY_CYCLE = 0x04
} indicator_led_properties_indecies_t;

static inline uint8_t indicator_led_get_port(indicator_led_t *led) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(led), INDICATOR_LED_PORT));
}
static inline uint8_t indicator_led_get_pin(indicator_led_t *led) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(led), INDICATOR_LED_PIN));
}
/* 0x98XX03: Current state of a device (DEVICE_PHASE) */
static inline void indicator_led_set_phase(indicator_led_t *led, uint8_t value) { 
    actor_set_property_numeric(actor_box(led), INDICATOR_LED_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t indicator_led_get_phase(indicator_led_t *led) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(led), INDICATOR_LED_PHASE));
}
/* 0x98XX04: Brightness of LED between 0 and 255 */
static inline void indicator_led_set_duty_cycle(indicator_led_t *led, uint8_t value) { 
    actor_set_property_numeric(actor_box(led), INDICATOR_LED_DUTY_CYCLE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t indicator_led_get_duty_cycle(indicator_led_t *led) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(led), INDICATOR_LED_DUTY_CYCLE));
}
typedef enum signal_beeper_properties_indecies {
  SIGNAL_BEEPER_PORT = 0x01,
  SIGNAL_BEEPER_PIN = 0x02,
  SIGNAL_BEEPER_PHASE = 0x03,
  SIGNAL_BEEPER_DUTY_CYCLE = 0x04,
  SIGNAL_BEEPER_TEST_Z = 0x05
} signal_beeper_properties_indecies_t;

static inline uint8_t signal_beeper_get_port(signal_beeper_t *beeper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(beeper), SIGNAL_BEEPER_PORT));
}
static inline uint8_t signal_beeper_get_pin(signal_beeper_t *beeper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(beeper), SIGNAL_BEEPER_PIN));
}
/* 0x99XX03: Current state of a device (DEVICE_PHASE) */
static inline void signal_beeper_set_phase(signal_beeper_t *beeper, uint8_t value) { 
    actor_set_property_numeric(actor_box(beeper), SIGNAL_BEEPER_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t signal_beeper_get_phase(signal_beeper_t *beeper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(beeper), SIGNAL_BEEPER_PHASE));
}
/* 0x99XX04: null */
static inline void signal_beeper_set_duty_cycle(signal_beeper_t *beeper, uint8_t value) { 
    actor_set_property_numeric(actor_box(beeper), SIGNAL_BEEPER_DUTY_CYCLE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t signal_beeper_get_duty_cycle(signal_beeper_t *beeper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(beeper), SIGNAL_BEEPER_DUTY_CYCLE));
}
/* 0x99XX05: null */
static inline void signal_beeper_set_test_z(signal_beeper_t *beeper, uint8_t value) { 
    actor_set_property_numeric(actor_box(beeper), SIGNAL_BEEPER_TEST_Z, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t signal_beeper_get_test_z(signal_beeper_t *beeper) {
    return *((uint8_t *) actor_get_property_pointer(actor_box(beeper), SIGNAL_BEEPER_TEST_Z));
}
