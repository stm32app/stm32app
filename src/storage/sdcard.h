#ifndef INC_STORAGE_SDCARD
#define INC_STORAGE_SDCARD

#ifdef __cplusplus
extern "C" {
#endif

#include "core/actor.h"
#include "coru.h"
#include "lfs.h"

/* Start of autogenerated OD types */
/* 0x7500: Storage SDCard
   SDIO-based SDcard */
typedef struct storage_sdcard_properties {
    uint8_t parameter_count;
    uint16_t sdio_index;
    uint32_t fs_read_size; // Minimum size of a block read. All read operations will be a  multiple of this value. 
    uint32_t fs_program_size; // Minimum size of a block program. All program operations will be a multiple of this value. 
    int32_t fs_block_cycles; // Number of erase cycles before littlefs evicts metadata logs and moves the metadata to another block.  
    uint16_t fs_cache_size; // Size of block caches. Each cache buffers a portion of a block in RAM. 
    uint32_t fs_lookahead_size; // Size of the lookahead buffer in bytes. A larger lookahead buffer increases the number of blocks found during an allocation pass.  
    uint32_t fs_name_max_size; // Optional upper limit on length of file names in bytes.  
    uint32_t fs_file_max_size; // Optional upper limit on files in bytes.  
    uint32_t fs_attr_max_size; // Optional upper limit on custom attributes in bytes.  
    uint32_t fs_metadata_max_size; // Optional upper limit on total space given to metadata pairs in bytes.  
    char fs_volume_name[17];
    uint8_t phase;
    uint32_t capacity;
    uint32_t block_size;
    uint32_t block_count;
    uint32_t max_bus_clock_frequency;
    uint8_t csd_version;
    uint16_t relative_card_address;
    uint8_t manufacturer_id;
    uint16_t oem_id;
    char product_name[6];
    uint8_t product_revision;
    uint32_t serial_number;
    uint16_t manufacturing_date;
    uint8_t version; // 2 or 1 
    bool_t high_capacity; // 1 for SDHC/SDXC card 
} storage_sdcard_properties_t;
/* End of autogenerated OD types */

struct storage_sdcard {
    actor_t *actor;
    storage_sdcard_properties_t *properties;
    transport_sdio_t *sdio;
    app_job_t job;
    coru_t io;
    app_buffer_t *coroutine_stack_buffer;
    app_buffer_t *lookahead_buffer;
    app_buffer_t *read_buffer;
    app_buffer_t *prog_buffer;
    struct lfs_config *fs_config;
    lfs_file_t *fs_file;
    lfs_t *fs;
};


extern actor_class_t storage_sdcard_class;

/* Start of autogenerated OD accessors */
typedef enum storage_sdcard_properties_properties {
  STORAGE_SDCARD_SDIO_INDEX = 0x01,
  STORAGE_SDCARD_FS_READ_SIZE = 0x02,
  STORAGE_SDCARD_FS_PROGRAM_SIZE = 0x03,
  STORAGE_SDCARD_FS_BLOCK_CYCLES = 0x04,
  STORAGE_SDCARD_FS_CACHE_SIZE = 0x05,
  STORAGE_SDCARD_FS_LOOKAHEAD_SIZE = 0x06,
  STORAGE_SDCARD_FS_NAME_MAX_SIZE = 0x07,
  STORAGE_SDCARD_FS_FILE_MAX_SIZE = 0x08,
  STORAGE_SDCARD_FS_ATTR_MAX_SIZE = 0x09,
  STORAGE_SDCARD_FS_METADATA_MAX_SIZE = 0x0A,
  STORAGE_SDCARD_FS_VOLUME_NAME = 0x0B,
  STORAGE_SDCARD_PHASE = 0x0C,
  STORAGE_SDCARD_CAPACITY = 0x0D,
  STORAGE_SDCARD_BLOCK_SIZE = 0x0E,
  STORAGE_SDCARD_BLOCK_COUNT = 0x0F,
  STORAGE_SDCARD_MAX_BUS_CLOCK_FREQUENCY = 0x10,
  STORAGE_SDCARD_CSD_VERSION = 0x11,
  STORAGE_SDCARD_RELATIVE_CARD_ADDRESS = 0x12,
  STORAGE_SDCARD_MANUFACTURER_ID = 0x13,
  STORAGE_SDCARD_OEM_ID = 0x14,
  STORAGE_SDCARD_PRODUCT_NAME = 0x15,
  STORAGE_SDCARD_PRODUCT_REVISION = 0x16,
  STORAGE_SDCARD_SERIAL_NUMBER = 0x17,
  STORAGE_SDCARD_MANUFACTURING_DATE = 0x18,
  STORAGE_SDCARD_VERSION = 0x19,
  STORAGE_SDCARD_HIGH_CAPACITY = 0x1A
} storage_sdcard_properties_properties_t;

/* 0x75XX0C: null */
static inline void storage_sdcard_set_phase(storage_sdcard_t *sdcard, uint8_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_sdcard_get_phase(storage_sdcard_t *sdcard) {
    return *((uint8_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_PHASE));
}
/* 0x75XX0D: null */
static inline void storage_sdcard_set_capacity(storage_sdcard_t *sdcard, uint32_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_CAPACITY, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t storage_sdcard_get_capacity(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_CAPACITY));
}
/* 0x75XX0E: null */
static inline void storage_sdcard_set_block_size(storage_sdcard_t *sdcard, uint32_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_BLOCK_SIZE, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t storage_sdcard_get_block_size(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_BLOCK_SIZE));
}
/* 0x75XX0F: null */
static inline void storage_sdcard_set_block_count(storage_sdcard_t *sdcard, uint32_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_BLOCK_COUNT, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t storage_sdcard_get_block_count(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_BLOCK_COUNT));
}
/* 0x75XX10: null */
static inline void storage_sdcard_set_max_bus_clock_frequency(storage_sdcard_t *sdcard, uint32_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_MAX_BUS_CLOCK_FREQUENCY, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t storage_sdcard_get_max_bus_clock_frequency(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_MAX_BUS_CLOCK_FREQUENCY));
}
/* 0x75XX11: null */
static inline void storage_sdcard_set_csd_version(storage_sdcard_t *sdcard, uint8_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_CSD_VERSION, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_sdcard_get_csd_version(storage_sdcard_t *sdcard) {
    return *((uint8_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_CSD_VERSION));
}
/* 0x75XX12: null */
static inline void storage_sdcard_set_relative_card_address(storage_sdcard_t *sdcard, uint16_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_RELATIVE_CARD_ADDRESS, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t storage_sdcard_get_relative_card_address(storage_sdcard_t *sdcard) {
    return *((uint16_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_RELATIVE_CARD_ADDRESS));
}
/* 0x75XX13: null */
static inline void storage_sdcard_set_manufacturer_id(storage_sdcard_t *sdcard, uint8_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_MANUFACTURER_ID, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_sdcard_get_manufacturer_id(storage_sdcard_t *sdcard) {
    return *((uint8_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_MANUFACTURER_ID));
}
/* 0x75XX14: null */
static inline void storage_sdcard_set_oem_id(storage_sdcard_t *sdcard, uint16_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_OEM_ID, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t storage_sdcard_get_oem_id(storage_sdcard_t *sdcard) {
    return *((uint16_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_OEM_ID));
}
/* 0x75XX15: null */
static inline void storage_sdcard_set_product_name(storage_sdcard_t *sdcard, char *value, size_t size) {
    actor_set_property_string(sdcard->actor, STORAGE_SDCARD_PRODUCT_NAME, value, size);
}
static inline char *storage_sdcard_get_product_name(storage_sdcard_t *sdcard) {
    return (char *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_PRODUCT_NAME);
}
/* 0x75XX16: null */
static inline void storage_sdcard_set_product_revision(storage_sdcard_t *sdcard, uint8_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_PRODUCT_REVISION, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_sdcard_get_product_revision(storage_sdcard_t *sdcard) {
    return *((uint8_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_PRODUCT_REVISION));
}
/* 0x75XX17: null */
static inline void storage_sdcard_set_serial_number(storage_sdcard_t *sdcard, uint32_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_SERIAL_NUMBER, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t storage_sdcard_get_serial_number(storage_sdcard_t *sdcard) {
    return *((uint32_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_SERIAL_NUMBER));
}
/* 0x75XX18: null */
static inline void storage_sdcard_set_manufacturing_date(storage_sdcard_t *sdcard, uint16_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_MANUFACTURING_DATE, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t storage_sdcard_get_manufacturing_date(storage_sdcard_t *sdcard) {
    return *((uint16_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_MANUFACTURING_DATE));
}
/* 0x75XX19: 2 or 1 */
static inline void storage_sdcard_set_version(storage_sdcard_t *sdcard, uint8_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_VERSION, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t storage_sdcard_get_version(storage_sdcard_t *sdcard) {
    return *((uint8_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_VERSION));
}
/* 0x75XX1A: 1 for SDHC/SDXC card */
static inline void storage_sdcard_set_high_capacity(storage_sdcard_t *sdcard, bool_t value) { 
    actor_set_property_numeric(sdcard->actor, STORAGE_SDCARD_HIGH_CAPACITY, (uint32_t)(value), sizeof(bool_t));
}
static inline bool_t storage_sdcard_get_high_capacity(storage_sdcard_t *sdcard) {
    return *((bool_t *) actor_get_property_pointer(sdcard->actor, STORAGE_SDCARD_HIGH_CAPACITY));
}
/* End of autogenerated OD accessors */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif