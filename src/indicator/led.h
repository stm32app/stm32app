#ifndef INC_DEV_BLANK
#define INC_DEV_BLANK

#ifdef __cplusplus
extern "C" {
#endif

#include "core/actor.h"

/* Start of autogenerated OD types */
/* 0x9800: Indicator LED 1null */
typedef struct indicator_led_properties {
    uint8_t parameter_count;
    uint8_t port;
    uint8_t pin;
    uint8_t phase; // Current state of a actor (DEVICE_PHASE) 
    uint8_t duty_cycle; // Brightness of LED between 0 and 255 
} indicator_led_properties_t;
/* End of autogenerated OD types */

struct indicator_led {
    actor_t *actor;
    indicator_led_properties_t *properties;
};


extern actor_class_t indicator_led_class;

/* Start of autogenerated OD accessors */
typedef enum indicator_led_properties_properties {
  INDICATOR_LED_PORT = 0x01,
  INDICATOR_LED_PIN = 0x02,
  INDICATOR_LED_PHASE = 0x03,
  INDICATOR_LED_DUTY_CYCLE = 0x04
} indicator_led_properties_properties_t;

/* 0x98XX03: Current state of a actor (DEVICE_PHASE) */
#define indicator_led_set_phase(led, value) actor_set_property_numeric(led->actor, (uint32_t) value, sizeof(uint8_t), INDICATOR_LED_PHASE)
#define indicator_led_get_phase(led) *((uint8_t *) actor_get_property_pointer(led->actor, &(uint8_t[sizeof(uint8_t)]{}), sizeof(uint8_t), INDICATOR_LED_PHASE)
/* 0x98XX04: Brightness of LED between 0 and 255 */
#define indicator_led_set_duty_cycle(led, value) actor_set_property_numeric(led->actor, (uint32_t) value, sizeof(uint8_t), INDICATOR_LED_DUTY_CYCLE)
#define indicator_led_get_duty_cycle(led) *((uint8_t *) actor_get_property_pointer(led->actor, &(uint8_t[sizeof(uint8_t)]{}), sizeof(uint8_t), INDICATOR_LED_DUTY_CYCLE)
/* End of autogenerated OD accessors */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif