#ifndef INC_TRANSPORT_SDIO
#define INC_TRANSPORT_SDIO

#ifdef __cplusplus
extern "C" {
#endif

#include "core/actor.h"
#include <libopencm3/stm32/sdio.h>
#define SDIO_UNITS 1

#define SDIO_ICR_CMD (SDIO_STA_CCRCFAIL | SDIO_ICR_CTIMEOUTC | SDIO_ICR_CMDRENDC | SDIO_ICR_CMDSENTC)
#define SDIO_ICR_DATA (SDIO_ICR_RXOVERRC | SDIO_ICR_DCRCFAILC | SDIO_ICR_DTIMEOUTC | SDIO_ICR_DBCKENDC | SDIO_ICR_STBITERRC)
#define SDIO_ICR_STATIC                                                                                                                    \
    (SDIO_ICR_CCRCFAILC | SDIO_ICR_DCRCFAILC | SDIO_ICR_CTIMEOUTC | SDIO_ICR_DTIMEOUTC | SDIO_ICR_TXUNDERRC | SDIO_ICR_RXOVERRC |          \
     SDIO_ICR_CMDRENDC | SDIO_ICR_CMDSENTC | SDIO_ICR_DATAENDC | SDIO_ICR_DBCKENDC)

#define SDIO_HIGH_CAPACITY ((uint32_t)0x40000000U)
#define SDIO_STANDARD_CAPACITY ((uint32_t)0x00000000U)
#define SDIO_3_0_to_3_3_V ((uint32_t)0x80100000U) // Timeout for CMD0 or CMD8
#define SD_CMD_TIMEOUT ((uint32_t)0x00010000U)

// start at 400khz
#define SDIO_CLKCR_CLKDIV_INITIAL 112 
// bump up to max of 48mhz
#define SDIO_CLKCR_CLKDIV_TRANSFER (2 <<  SDIO_CLKCR_CLKDIV_SHIFT)


// SDIO timeout for data transfer ((48MHz / CLKDIV / 1000) * timeout_ms)
// TODO: Freq
#define SD_DATA_READ_TIMEOUT ((uint32_t)((48000000U / (SDIO_CLKCR_CLKDIV_TRANSFER + 2U) / 1000U) * 100U))  // Data read timeout is 100ms
#define SD_DATA_WRITE_TIMEOUT ((uint32_t)((48000000U / (SDIO_CLKCR_CLKDIV_TRANSFER + 2U) / 1000U) * 250U)) // Date write timeout is 250ms

// SDIO transfer flags
#define SDIO_XFER_COMMON_FLAGS        (SDIO_STA_DTIMEOUT | SDIO_STA_DCRCFAIL | SDIO_STA_STBITERR)
// SDIO flags for single block receive
#define SDIO_RX_SB_FLAGS              (SDIO_XFER_COMMON_FLAGS | SDIO_STA_DBCKEND | SDIO_STA_RXOVERR)
// SDIO flags for multiple block receive
#define SDIO_RX_MB_FLAGS              (SDIO_XFER_COMMON_FLAGS | SDIO_STA_DATAEND | SDIO_STA_RXOVERR)
// SDIO flags for single block transmit
#define SDIO_TX_SB_FLAGS              (SDIO_XFER_COMMON_FLAGS | SDIO_STA_DBCKEND | SDIO_STA_TXUNDERR)
// SDIO flags for multiple block transmit
#define SDIO_TX_MB_FLAGS              (SDIO_XFER_COMMON_FLAGS | SDIO_STA_DATAEND | SDIO_STA_TXUNDERR)
#define SDIO_XFER_ERROR_FLAGS         (SDIO_XFER_COMMON_FLAGS | SDIO_STA_TXUNDERR | SDIO_STA_RXOVERR)

/* Start of autogenerated OD types */
/* 0x62A0: null
   Secure input/output protocol */
typedef struct transport_sdio_properties {
    uint8_t parameter_count;
    uint8_t dma_unit;
    uint8_t dma_stream;
    uint8_t dma_channel;
    uint8_t af;
    uint8_t d0_port;
    uint8_t d0_pin;
    uint8_t d1_port;
    uint8_t d1_pin;
    uint8_t d2_port;
    uint8_t d2_pin;
    uint8_t d3_port;
    uint8_t d3_pin;
    uint8_t ck_port;
    uint8_t ck_pin;
    uint8_t cmd_port;
    uint8_t cmd_pin;
    uint8_t phase;
    uint32_t capacity;
    uint32_t block_size;
    uint32_t block_count;
    uint32_t max_bus_clock_frequency;
    uint8_t csd_version;
    uint16_t relative_card_address;
    uint8_t manufacturer_id;
    uint16_t oem_id;
    char product_name[6];
    uint8_t product_revision;
    uint32_t serial_number;
    uint16_t manufacturing_date;
    uint8_t version; // 2 or 1 
    bool_t high_capacity; // 1 for SDHC/SDXC card 
} transport_sdio_properties_t;
/* End of autogenerated OD types */

struct transport_sdio {
    actor_t *actor;
    transport_sdio_properties_t *properties;
    uint32_t address;
    uint32_t *source_clock;
    uint16_t reset;
    uint16_t peripheral_clock;
    uint8_t irq;
    app_job_t job;
    app_signal_t incoming_signal;

    app_buffer_t *source_buffer;
    app_buffer_t *target_buffer;
};

extern actor_class_t transport_sdio_class;

/* Start of autogenerated OD accessors */
typedef enum transport_sdio_properties_properties {
  TRANSPORT_SDIO_DMA_UNIT = 0x01,
  TRANSPORT_SDIO_DMA_STREAM = 0x02,
  TRANSPORT_SDIO_DMA_CHANNEL = 0x03,
  TRANSPORT_SDIO_AF = 0x04,
  TRANSPORT_SDIO_D0_PORT = 0x05,
  TRANSPORT_SDIO_D0_PIN = 0x06,
  TRANSPORT_SDIO_D1_PORT = 0x07,
  TRANSPORT_SDIO_D1_PIN = 0x08,
  TRANSPORT_SDIO_D2_PORT = 0x09,
  TRANSPORT_SDIO_D2_PIN = 0x0A,
  TRANSPORT_SDIO_D3_PORT = 0x0B,
  TRANSPORT_SDIO_D3_PIN = 0x0C,
  TRANSPORT_SDIO_CK_PORT = 0x0D,
  TRANSPORT_SDIO_CK_PIN = 0x0E,
  TRANSPORT_SDIO_CMD_PORT = 0x0F,
  TRANSPORT_SDIO_CMD_PIN = 0x10,
  TRANSPORT_SDIO_PHASE = 0x11,
  TRANSPORT_SDIO_CAPACITY = 0x12,
  TRANSPORT_SDIO_BLOCK_SIZE = 0x13,
  TRANSPORT_SDIO_BLOCK_COUNT = 0x14,
  TRANSPORT_SDIO_MAX_BUS_CLOCK_FREQUENCY = 0x15,
  TRANSPORT_SDIO_CSD_VERSION = 0x16,
  TRANSPORT_SDIO_RELATIVE_CARD_ADDRESS = 0x17,
  TRANSPORT_SDIO_MANUFACTURER_ID = 0x18,
  TRANSPORT_SDIO_OEM_ID = 0x19,
  TRANSPORT_SDIO_PRODUCT_NAME = 0x1A,
  TRANSPORT_SDIO_PRODUCT_REVISION = 0x1B,
  TRANSPORT_SDIO_SERIAL_NUMBER = 0x1C,
  TRANSPORT_SDIO_MANUFACTURING_DATE = 0x1D,
  TRANSPORT_SDIO_VERSION = 0x1E,
  TRANSPORT_SDIO_HIGH_CAPACITY = 0x1F
} transport_sdio_properties_properties_t;

/* 0x62A011: null */
static inline void transport_sdio_set_phase(transport_sdio_t *sdio, uint8_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_sdio_get_phase(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_PHASE));
}
/* 0x62A012: null */
static inline void transport_sdio_set_capacity(transport_sdio_t *sdio, uint32_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_CAPACITY, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t transport_sdio_get_capacity(transport_sdio_t *sdio) {
    return *((uint32_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_CAPACITY));
}
/* 0x62A013: null */
static inline void transport_sdio_set_block_size(transport_sdio_t *sdio, uint32_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_BLOCK_SIZE, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t transport_sdio_get_block_size(transport_sdio_t *sdio) {
    return *((uint32_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_BLOCK_SIZE));
}
/* 0x62A014: null */
static inline void transport_sdio_set_block_count(transport_sdio_t *sdio, uint32_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_BLOCK_COUNT, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t transport_sdio_get_block_count(transport_sdio_t *sdio) {
    return *((uint32_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_BLOCK_COUNT));
}
/* 0x62A015: null */
static inline void transport_sdio_set_max_bus_clock_frequency(transport_sdio_t *sdio, uint32_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_MAX_BUS_CLOCK_FREQUENCY, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t transport_sdio_get_max_bus_clock_frequency(transport_sdio_t *sdio) {
    return *((uint32_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_MAX_BUS_CLOCK_FREQUENCY));
}
/* 0x62A016: null */
static inline void transport_sdio_set_csd_version(transport_sdio_t *sdio, uint8_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_CSD_VERSION, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_sdio_get_csd_version(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_CSD_VERSION));
}
/* 0x62A017: null */
static inline void transport_sdio_set_relative_card_address(transport_sdio_t *sdio, uint16_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_RELATIVE_CARD_ADDRESS, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t transport_sdio_get_relative_card_address(transport_sdio_t *sdio) {
    return *((uint16_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_RELATIVE_CARD_ADDRESS));
}
/* 0x62A018: null */
static inline void transport_sdio_set_manufacturer_id(transport_sdio_t *sdio, uint8_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_MANUFACTURER_ID, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_sdio_get_manufacturer_id(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_MANUFACTURER_ID));
}
/* 0x62A019: null */
static inline void transport_sdio_set_oem_id(transport_sdio_t *sdio, uint16_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_OEM_ID, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t transport_sdio_get_oem_id(transport_sdio_t *sdio) {
    return *((uint16_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_OEM_ID));
}
/* 0x62A01A: null */
static inline void transport_sdio_set_product_name(transport_sdio_t *sdio, char  *value, size_t size) {
    actor_set_property_string(sdio->actor, TRANSPORT_SDIO_PRODUCT_NAME, value, size);
}
static inline char *transport_sdio_get_product_name(transport_sdio_t *sdio) {
    return (char *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_PRODUCT_NAME);
}
/* 0x62A01B: null */
static inline void transport_sdio_set_product_revision(transport_sdio_t *sdio, uint8_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_PRODUCT_REVISION, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_sdio_get_product_revision(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_PRODUCT_REVISION));
}
/* 0x62A01C: null */
static inline void transport_sdio_set_serial_number(transport_sdio_t *sdio, uint32_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_SERIAL_NUMBER, (uint32_t)(value), sizeof(uint32_t));
}
static inline uint32_t transport_sdio_get_serial_number(transport_sdio_t *sdio) {
    return *((uint32_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_SERIAL_NUMBER));
}
/* 0x62A01D: null */
static inline void transport_sdio_set_manufacturing_date(transport_sdio_t *sdio, uint16_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_MANUFACTURING_DATE, (uint32_t)(value), sizeof(uint16_t));
}
static inline uint16_t transport_sdio_get_manufacturing_date(transport_sdio_t *sdio) {
    return *((uint16_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_MANUFACTURING_DATE));
}
/* 0x62A01E: 2 or 1 */
static inline void transport_sdio_set_version(transport_sdio_t *sdio, uint8_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_VERSION, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_sdio_get_version(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_VERSION));
}
/* 0x62A01F: 1 for SDHC/SDXC card */
static inline void transport_sdio_set_high_capacity(transport_sdio_t *sdio, bool_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_HIGH_CAPACITY, (uint32_t)(value), sizeof(bool_t));
}
static inline bool_t transport_sdio_get_high_capacity(transport_sdio_t *sdio) {
    return *((bool_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_HIGH_CAPACITY));
}
/* End of autogenerated OD accessors */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif