#ifndef _DEV_EPAPER_H_
#define _DEV_EPAPER_H_

#define screen_epaper_FULL 0
#define screen_epaper_PART 1

#include <actor/actor.h>
#include "transport/spi.h"
/* Start of autogenerated OD types */
/* 0x9000: Screen Epaper 1
   E-ink screen with low power consumption and low update frequency */
typedef struct screen_epaper_properties {
    uint8_t parameter_count;
    uint16_t spi_index;
    uint8_t dc_port;
    uint8_t dc_pin;
    uint8_t cs_port;
    uint8_t cs_pin;
    uint8_t busy_port;
    uint8_t busy_pin;
    uint8_t reset_port;
    uint8_t reset_pin;
    uint16_t width;
    uint16_t height;
    uint16_t mode;
    uint8_t phase;
} screen_epaper_properties_t;
/* End of autogenerated OD types */

struct screen_epaper {
    actor_t *actor;
    screen_epaper_properties_t *properties;
    transport_spi_t *spi;
    uint8_t resetting_phase;
    uint8_t initializing_phase;
};

extern actor_class_t screen_epaper_class;

/* Start of autogenerated OD accessors */
typedef enum screen_epaper_properties_indecies {
  SCREEN_EPAPER_SPI_INDEX = 0x01,
  SCREEN_EPAPER_DC_PORT = 0x02,
  SCREEN_EPAPER_DC_PIN = 0x03,
  SCREEN_EPAPER_CS_PORT = 0x04,
  SCREEN_EPAPER_CS_PIN = 0x05,
  SCREEN_EPAPER_BUSY_PORT = 0x06,
  SCREEN_EPAPER_BUSY_PIN = 0x07,
  SCREEN_EPAPER_RESET_PORT = 0x08,
  SCREEN_EPAPER_RESET_PIN = 0x09,
  SCREEN_EPAPER_WIDTH = 0x0A,
  SCREEN_EPAPER_HEIGHT = 0x0B,
  SCREEN_EPAPER_MODE = 0x0C,
  SCREEN_EPAPER_PHASE = 0x0D
} screen_epaper_properties_indecies_t;

/* 0x90XX0D: null */
static inline void screen_epaper_set_phase(screen_epaper_t *epaper, uint8_t value) { 
    actor_set_property_numeric(epaper->actor, SCREEN_EPAPER_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t screen_epaper_get_phase(screen_epaper_t *epaper) {
    return *((uint8_t *) actor_get_property_pointer(epaper->actor, SCREEN_EPAPER_PHASE));
}
/* End of autogenerated OD accessors */
#endif