#ifndef INC_DEV_CIRCUIT
#define INC_DEV_CIRCUIT

#ifdef __cplusplus
extern "C" {
#endif

#include <actor/input/sensor.h>
#include <actor/actor.h>
#include <actor/module/adc.h>

/* Start of autogenerated OD types */
/* 0x4000: Device Circuit 1
   A relay that turns circuit on and off (pwm optional 

Can be paired with Hall Sensor to measure current for taking metrics via ADC. Applying current limit will turn relay into a circuit breaker. */
typedef struct device_circuit_properties {
    uint8_t parameter_count;
    uint8_t port;
    uint8_t pin; // Relay GPIO port (1 for A, 2 for B, etc), required 
    uint16_t limit_current; // Relay GPIO pin, required 
    uint16_t limit_voltage; // Relay will turn off if measured current surpasses this limit 
    uint16_t psu_index; // Currently there is no way to enforce voltage limit 
    uint16_t sensor_index; // PSU circuit is turned on when one of their dependends is turned on 
    uint8_t phase; // Hall sensor measures current and allows circuit to become a circuit breaker 
    uint16_t duty_cycle; // Phase x 
    uint16_t current;
    uint16_t voltage; // Current  x 
    uint8_t consumers;
} device_circuit_properties_t;
/* End of autogenerated OD types */

struct device_circuit {
    actor_t *actor;
    device_circuit_properties_t *properties;
    device_circuit_t *psu;
    input_sensor_t *current_sensor;
    module_adc_t *adc;;
};

extern actor_class_t device_circuit_class;

void device_circuit_set_state(device_circuit_t *circuit, bool state);
bool device_circuit_get_state(device_circuit_t *circuit);



#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* objectAccessOD_H */