#ifndef INC_TRANSPORT_SDIO
#define INC_TRANSPORT_SDIO

#ifdef __cplusplus
extern "C" {
#endif

#include <actor/actor.h>
#include <libopencm3/stm32/sdio.h>
#define SDIO_UNITS 1

#define SDIO_ICR_CMD (SDIO_STA_CCRCFAIL | SDIO_ICR_CTIMEOUTC | SDIO_ICR_CMDRENDC | SDIO_ICR_CMDSENTC)
#define SDIO_ICR_DATA (SDIO_ICR_RXOVERRC | SDIO_ICR_DCRCFAILC | SDIO_ICR_DTIMEOUTC | SDIO_ICR_DBCKENDC | SDIO_ICR_STBITERRC)
#define SDIO_ICR_STATIC                                                                                                                    \
    (SDIO_ICR_CCRCFAILC | SDIO_ICR_DCRCFAILC | SDIO_ICR_CTIMEOUTC | SDIO_ICR_DTIMEOUTC | SDIO_ICR_TXUNDERRC | SDIO_ICR_RXOVERRC |          \
     SDIO_ICR_CMDRENDC | SDIO_ICR_CMDSENTC | SDIO_ICR_DATAENDC | SDIO_ICR_DBCKENDC)

#define SDIO_HIGH_CAPACITY ((uint32_t)0x40000000U)
#define SDIO_STANDARD_CAPACITY ((uint32_t)0x00000000U)
#define SDIO_3_0_to_3_3_V ((uint32_t)0x80100000U) // Timeout for CMD0 or CMD8
#define SD_CMD_TIMEOUT ((uint32_t)0x00010000U)

// start at 400khz
#define SDIO_CLKCR_CLKDIV_INITIAL 112 
// bump up to max of 48mhz
#define SDIO_CLKCR_CLKDIV_TRANSFER (2 <<  SDIO_CLKCR_CLKDIV_SHIFT)


// SDIO timeout for data transfer ((48MHz / CLKDIV / 1000) * timeout_ms)
// TODO: Freq
#define SD_DATA_READ_TIMEOUT ((uint32_t)((48000000U / (SDIO_CLKCR_CLKDIV_TRANSFER + 2U) / 1000U) * 100U))  // Data read timeout is 100ms
#define SD_DATA_WRITE_TIMEOUT ((uint32_t)((48000000U / (SDIO_CLKCR_CLKDIV_TRANSFER + 2U) / 1000U) * 250U)) // Date write timeout is 250ms

#define SDIO_XFER_ERROR_FLAGS         ((SDIO_STA_DTIMEOUT | SDIO_STA_DCRCFAIL | SDIO_STA_STBITERR) | SDIO_STA_TXUNDERR | SDIO_STA_RXOVERR)

/* Start of autogenerated OD types */
/* 0x62A0: null
   Secure input/output protocol */
typedef struct transport_sdio_properties {
    uint8_t parameter_count;
    uint8_t dma_unit;
    uint8_t dma_stream;
    uint8_t dma_channel;
    uint8_t af;
    uint8_t d0_port;
    uint8_t d0_pin;
    uint8_t d1_port;
    uint8_t d1_pin;
    uint8_t d2_port;
    uint8_t d2_pin;
    uint8_t d3_port;
    uint8_t d3_pin;
    uint8_t ck_port;
    uint8_t ck_pin;
    uint8_t cmd_port;
    uint8_t cmd_pin;
    uint8_t phase;
} transport_sdio_properties_t;
/* End of autogenerated OD types */

struct transport_sdio {
    actor_t *actor;
    transport_sdio_properties_t *properties;
    uint32_t address;
    uint32_t *source_clock;
    uint16_t reset;
    uint16_t peripheral_clock;
    uint8_t irq;
    actor_job_t *job;
    actor_signal_t incoming_signal;

    actor_buffer_t *source_buffer;
    actor_buffer_t *target_buffer;
};

extern actor_class_t transport_sdio_class;

/* Start of autogenerated OD accessors */
typedef enum transport_sdio_properties_indecies {
  TRANSPORT_SDIO_DMA_UNIT = 0x01,
  TRANSPORT_SDIO_DMA_STREAM = 0x02,
  TRANSPORT_SDIO_DMA_CHANNEL = 0x03,
  TRANSPORT_SDIO_AF = 0x04,
  TRANSPORT_SDIO_D0_PORT = 0x05,
  TRANSPORT_SDIO_D0_PIN = 0x06,
  TRANSPORT_SDIO_D1_PORT = 0x07,
  TRANSPORT_SDIO_D1_PIN = 0x08,
  TRANSPORT_SDIO_D2_PORT = 0x09,
  TRANSPORT_SDIO_D2_PIN = 0x0A,
  TRANSPORT_SDIO_D3_PORT = 0x0B,
  TRANSPORT_SDIO_D3_PIN = 0x0C,
  TRANSPORT_SDIO_CK_PORT = 0x0D,
  TRANSPORT_SDIO_CK_PIN = 0x0E,
  TRANSPORT_SDIO_CMD_PORT = 0x0F,
  TRANSPORT_SDIO_CMD_PIN = 0x10,
  TRANSPORT_SDIO_PHASE = 0x11
} transport_sdio_properties_indecies_t;

/* 0x62A011: null */
static inline void transport_sdio_set_phase(transport_sdio_t *sdio, uint8_t value) { 
    actor_set_property_numeric(sdio->actor, TRANSPORT_SDIO_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_sdio_get_phase(transport_sdio_t *sdio) {
    return *((uint8_t *) actor_get_property_pointer(sdio->actor, TRANSPORT_SDIO_PHASE));
}
/* End of autogenerated OD accessors */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif