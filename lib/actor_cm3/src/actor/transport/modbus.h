#ifndef INC_DEV_ANALOG_SENSOR
#define INC_DEV_ANALOG_SENSOR

#ifdef __cplusplus
extern "C" {
#endif

#include <actor/actor.h>
#include "lib/bytes.h"
#include "transport/usart.h"
#include "module/timer.h"

#define MODBUS_RX_BUFFER_SIZE

/* Start of autogenerated OD types */
/* 0x6280: Transport Modbus 1
   Modbus over USART powered by DMA */
typedef struct transport_modbus_properties {
    uint8_t parameter_count;
    uint16_t usart_index; // Index of USART device 
    uint8_t rts_port; // GPIO port for ready-to-send 
    uint8_t rts_pin; // GPIO pin for ready-to-send 
    uint8_t slave_address; // Leave 0 for master device 
    uint16_t timeout;
    uint8_t phase; // in us 
} transport_modbus_properties_t;
/* End of autogenerated OD types */

typedef struct {
    uint8_t recipient;
    uint8_t type;
    uint16_t index;
    uint16_t value;
    uint16_t crc;
    uint8_t *response;
} transport_modbus_request_t;

struct transport_modbus {
    actor_t *actor;
    transport_modbus_properties_t *properties;
    transport_usart_t *usart;
    module_timer_t *timer;
    transport_modbus_request_t request;

    uint16_t rx_position;
    uint8_t *rx_circular_buffer;

    uint32_t idle_timeout;

    uint16_t timeout;
    uint32_t (*abcd)(uint16_t abcd);
    uint16_t (*ab)(uint16_t ab);
};

typedef enum {
    MODBUS_READ_COIL_STATUS = 1,
    MODBUS_READ_DISCRETE_INPUTS = 2,
    MODBUS_READ_HOLDING_REGISTERS = 3,
    MODBUS_READ_INPUT_REGISTERS = 4,
    MODBUS_WRITE_SINGLE_COIL = 5,
    MODBUS_WRITE_SINGLE_REGISTER = 6,
    MODBUS_WRITE_MULTIPLE_COILS = 15,
    MODBUS_WRITE_MULTIPLE_REGISTERS = 16

} transport_modbus_cmd_t;

extern actor_class_t transport_modbus_class;


//int transport_modbus_send(transport_modbus_t *modbus, uint8_t *data, uint8_t length);


int transport_modbus_receive(transport_modbus_t *modbus, uint8_t *data);
int transport_modbus_cancel(transport_modbus_t *modbus);
int transport_modbus_respond(transport_modbus_t *modbus, transport_modbus_request_t *request);
int transport_modbus_request(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint8_t type, uint16_t length,
                          uint8_t *response);

int transport_modbus_read_coil(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint8_t *data);
int transport_modbus_read_coils(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint16_t length,
                             uint8_t *data);
int transport_modbus_read_discrete_input(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint8_t *data);
int transport_modbus_read_discrete_inputs(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint16_t length,
                                       uint8_t *data);
int transport_modbus_read_input_registers_8i(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint16_t length,
                                          uint8_t *data);
int transport_modbus_read_input_registers_16i(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint16_t length,
                                           uint16_t *data);
int transport_modbus_read_input_register_16i(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint16_t *data);
int transport_modbus_read_input_registers_32f(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint16_t length,
                                           float *data);
int transport_modbus_read_input_register_32f(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, float *data);
int transport_modbus_read_input_register_32i(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint32_t *data);
int transport_modbus_read_input_registers_32i(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint16_t length,
                                           uint32_t *data);
int transport_modbus_read_holding_registers_8i(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint16_t length,
                                            uint8_t *data);
int transport_modbus_read_holding_registers_16i(transport_modbus_t *modbus, uint8_t recipient, uint16_t index,
                                             uint16_t length, uint16_t *data);
int transport_modbus_read_holding_register16i(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint16_t *data);
int transport_modbus_read_holding_registers_32f(transport_modbus_t *modbus, uint8_t recipient, uint16_t index,
                                             uint16_t length, float *data);
int transport_modbus_read_holding_register32f(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, float *data);
int transport_modbus_read_holding_register32i(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint32_t *data);
int transport_modbus_read_holding_registers_32i(transport_modbus_t *modbus, uint8_t recipient, uint16_t index,
                                             uint16_t length, uint32_t *data);
int transport_modbus_write_holding_register16i(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint16_t data);
int transport_modbus_write_coil(transport_modbus_t *modbus, uint8_t recipient, uint16_t index, uint8_t data);


uint16_t transport_modbus_crc16(const uint8_t *nData, uint16_t wLength);
transport_modbus_request_t *transport_modbus_allocate_request(transport_modbus_t *modbus);

/* Start of autogenerated OD accessors */
typedef enum transport_modbus_properties_indecies {
  TRANSPORT_MODBUS_USART_INDEX = 0x01,
  TRANSPORT_MODBUS_RTS_PORT = 0x02,
  TRANSPORT_MODBUS_RTS_PIN = 0x03,
  TRANSPORT_MODBUS_SLAVE_ADDRESS = 0x04,
  TRANSPORT_MODBUS_TIMEOUT = 0x05,
  TRANSPORT_MODBUS_PHASE = 0x06
} transport_modbus_properties_indecies_t;

/* 0x62XX06: in us */
static inline void transport_modbus_set_phase(transport_modbus_t *modbus, uint8_t value) { 
    actor_set_property_numeric(modbus->actor, TRANSPORT_MODBUS_PHASE, (uint32_t)(value), sizeof(uint8_t));
}
static inline uint8_t transport_modbus_get_phase(transport_modbus_t *modbus) {
    return *((uint8_t *) actor_get_property_pointer(modbus->actor, TRANSPORT_MODBUS_PHASE));
}
/* End of autogenerated OD accessors */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif