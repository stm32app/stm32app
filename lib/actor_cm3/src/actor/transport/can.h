#ifndef INC_DEV_CAN
#define INC_DEV_CAN

#ifdef __cplusplus
extern "C" {
#endif
#include <actor/actor.h>

/* Start of autogenerated OD types */
/* 0x6200: Transport CAN 1null */
typedef struct transport_can_properties {
    uint8_t parameter_count;
    uint8_t tx_port;
    uint8_t tx_pin;
    uint8_t rx_port;
    uint8_t rx_pin;
    int16_t bitrate;
    uint16_t brp;
    uint8_t sjw;
    uint8_t prop;
    uint8_t ph_seg1;
    uint8_t ph_seg2;
    uint8_t phase;
} transport_can_properties_t;
/* End of autogenerated OD types */

struct transport_can {
    actor_t *actor;
    transport_can_properties_t *properties;
    actor_t *canopen;
};


extern actor_interface_t transport_can_class;



#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif




#ifdef CO_CAN_INTERFACE
#ifdef STMF32F1
#if CO_CAN_RX_FIFO_INDEX == 0 || !defined(CO_CAN_RX_FIFO_INDEX)
void usb_hp_can_tx_isr(void) { CO_CANTxInterrupt(CO->CANmodule); }
void usb_lp_can_rx0_isr(void) { CO_CANRxInterrupt(CO->CANmodule); }
#else
void usb_lp_can_rx1_isr(void) { CO_CANRxInterrupt(CO->CANmodule); }
#endif
#else
#if CO_CAN_INTERFACE == CAN1
#if CO_CAN_RX_FIFO_INDEX == 0
void can1_tx_isr(void) { CO_CANTxInterrupt(CO->CANmodule); }
void can1_rx0_isr(void) { CO_CANRxInterrupt(CO->CANmodule); }
#else
void can1_rx1_isr(void) { CO_CANRxInterrupt(CO->CANmodule); }
#endif
#else
#if CO_CAN_RX_FIFO_INDEX == 0
void can2_tx_isr(void) { CO_CANTxInterrupt(CO->CANmodule); }
void can2_rx0_isr(void) { CO_CANRxInterrupt(CO->CANmodule); }
#else
void can2_rx1_isr(void) { CO_CANRxInterrupt(CO->CANmodule); }
#endif
#endif
#endif
#endif
