#ifndef INC_DEV_I2C
#define INC_DEV_I2C

#ifdef __cplusplus
extern "C" {
#endif

#include <actor/actor.h>
#include <libopencm3/stm32/i2c.h>
#include <actor/lib/dma.h>
#include <actor/buffer.h>

#define I2C_UNITS 3

/* Start of autogenerated OD types */
/* 0x6260: Transport I2C 1
   Serial protocol */
typedef struct transport_i2c_properties {
    uint8_t parameter_count;
    uint8_t dma_rx_unit;
    uint8_t dma_rx_stream;
    uint8_t dma_rx_channel;
    uint8_t dma_rx_circular_buffer_size;
    uint16_t rx_pool_max_size;
    uint16_t rx_pool_initial_size;
    uint16_t rx_pool_block_size;
    uint8_t dma_tx_unit;
    uint8_t dma_tx_stream;
    uint8_t dma_tx_channel;
    uint8_t af;
    uint8_t smba_pin;
    uint8_t smba_port;
    uint8_t sda_port;
    uint8_t sda_pin;
    uint8_t scl_port;
    uint8_t scl_pin;
    int8_t frequency; // in mhz 
    uint8_t databits;
    uint8_t phase;
    uint8_t slave_address;
} transport_i2c_properties_t;
/* End of autogenerated OD types */

struct transport_i2c{
    actor_t *actor;
    transport_i2c_properties_t *properties;
    uint32_t clock;
    uint32_t address;
    uint32_t ev_irq;
    uint32_t er_irq;

    actor_signal_t incoming_signal;
    actor_job_t *job;
    uint16_t job_retries;
    
    actor_buffer_t *ring_buffer;
    actor_buffer_t *output_buffer;
    actor_buffer_t *source_buffer;

    uint8_t ready;
} ;


typedef struct {
  uint8_t slave_address;
  uint16_t memory_address;
} transport_i2c_event_argument_t;


void *i2c_pack_event_argument(uint8_t device_address, uint16_t memory_address);
transport_i2c_event_argument_t *i2c_unpack_event_argument(void **argument);

extern actor_class_t transport_i2c_class;



#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif